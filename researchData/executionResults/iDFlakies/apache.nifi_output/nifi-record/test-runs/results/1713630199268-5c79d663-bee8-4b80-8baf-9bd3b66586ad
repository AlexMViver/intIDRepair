{"id":"1713630199268-5c79d663-bee8-4b80-8baf-9bd3b66586ad","testOrder":["org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()"],"results":{"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","result":"PASS","time":2.98969E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","result":"PASS","time":2.57615E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","result":"PASS","time":7.46302E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","result":"PASS","time":0.00218588,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","result":"PASS","time":0.001509787,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","result":"PASS","time":4.45574E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","result":"PASS","time":4.04593E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","result":"PASS","time":7.09242E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","result":"PASS","time":9.28794E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","result":"PASS","time":3.17581E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","result":"PASS","time":0.373038438,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","result":"PASS","time":4.04023E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","result":"PASS","time":2.10081E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","result":"PASS","time":0.010713309,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","result":"PASS","time":2.23874E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","result":"PASS","time":7.63072E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","result":"PASS","time":0.001615768,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","result":"PASS","time":6.70269E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","result":"PASS","time":4.27683E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","result":"PASS","time":4.9151E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","result":"PASS","time":2.12009E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","result":"PASS","time":0.001978004,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","result":"PASS","time":4.20525E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","result":"PASS","time":0.006448287,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","result":"PASS","time":0.023244884,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","result":"PASS","time":0.005268503,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","result":"PASS","time":0.00989574,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","result":"PASS","time":4.41127E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","result":"PASS","time":2.6719E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","result":"PASS","time":3.58268E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","result":"PASS","time":3.3768E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","result":"PASS","time":4.87913E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","result":"PASS","time":5.02292E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","result":"PASS","time":2.00307E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","result":"PASS","time":2.99238E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","result":"PASS","time":0.003755717,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","result":"PASS","time":7.15368E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","result":"PASS","time":0.00787681,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","result":"PASS","time":9.65782E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","result":"PASS","time":0.001623505,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","result":"PASS","time":4.37119E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","result":"PASS","time":7.14875E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","result":"PASS","time":4.9889E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","result":"PASS","time":0.014665093,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","result":"PASS","time":0.018360088,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","result":"PASS","time":6.1111E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","result":"PASS","time":3.44697E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","result":"PASS","time":2.59223E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","result":"PASS","time":0.007575638,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","result":"PASS","time":2.42509E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","result":"PASS","time":8.33857E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","result":"PASS","time":2.17822E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","result":"PASS","time":3.03597E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","result":"PASS","time":0.203242983,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","result":"PASS","time":0.020982053,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","result":"PASS","time":0.006513431,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","result":"PASS","time":4.182E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","result":"PASS","time":0.007036194,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","result":"PASS","time":0.030015171,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","result":"PASS","time":9.81226E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","result":"PASS","time":0.009984027,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","result":"PASS","time":4.27168E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","result":"PASS","time":0.004540834,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()","result":"PASS","time":0.004493594,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","result":"PASS","time":0.001007107,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","result":"PASS","time":0.014444008,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","result":"PASS","time":0.005812209,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","result":"PASS","time":2.43725E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","result":"PASS","time":1.96627E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","result":"PASS","time":3.39833E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","result":"PASS","time":0.004760641,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","result":"PASS","time":4.99216E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","result":"PASS","time":0.004905426,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","result":"PASS","time":3.97411E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","result":"PASS","time":0.006305672,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","result":"PASS","time":8.25519E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","result":"PASS","time":0.003280545,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","result":"PASS","time":0.001075784,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","result":"PASS","time":0.021131762,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","result":"PASS","time":4.50529E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","result":"PASS","time":2.24246E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","result":"PASS","time":3.30107E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","result":"PASS","time":4.95863E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","result":"PASS","time":0.004137164,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","result":"PASS","time":2.54164E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","result":"PASS","time":8.09747E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","result":"PASS","time":2.83759E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","result":"PASS","time":2.65644E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","result":"PASS","time":6.12664E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","result":"PASS","time":8.02177E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","result":"PASS","time":0.005162394,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","result":"PASS","time":5.09241E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","result":"PASS","time":2.62085E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","result":"PASS","time":0.013209305,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","result":"PASS","time":0.002134429,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","result":"PASS","time":0.005066481,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","result":"PASS","time":2.26469E-4,"stackTrace":[]}}}