{"id":"1713627413808-98794e81-dfd0-40f1-8159-b1802942b2eb","testOrder":["org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()"],"results":{"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","result":"PASS","time":2.82291E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","result":"PASS","time":2.99175E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","result":"PASS","time":7.14999E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","result":"PASS","time":0.002850468,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","result":"PASS","time":0.002262823,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","result":"PASS","time":3.98865E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","result":"PASS","time":5.48427E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","result":"PASS","time":9.21544E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","result":"PASS","time":0.001193234,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","result":"PASS","time":2.52761E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","result":"PASS","time":0.361213906,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","result":"PASS","time":5.18031E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","result":"PASS","time":2.02489E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","result":"PASS","time":0.013666695,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","result":"PASS","time":2.04386E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","result":"PASS","time":9.43267E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","result":"PASS","time":0.001857356,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","result":"PASS","time":8.25988E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","result":"PASS","time":3.35252E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","result":"PASS","time":7.29044E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","result":"PASS","time":2.14489E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","result":"PASS","time":0.002769,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","result":"PASS","time":5.32795E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","result":"PASS","time":0.009078619,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","result":"PASS","time":0.031203367,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","result":"PASS","time":0.004976622,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","result":"PASS","time":0.006063238,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","result":"PASS","time":5.88857E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","result":"PASS","time":2.27084E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","result":"PASS","time":3.29072E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","result":"PASS","time":3.44193E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","result":"PASS","time":5.71158E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","result":"PASS","time":5.24232E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","result":"PASS","time":3.52826E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","result":"PASS","time":2.82358E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","result":"PASS","time":0.003664028,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","result":"PASS","time":8.35153E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","result":"PASS","time":0.010284095,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","result":"PASS","time":8.87673E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","result":"PASS","time":0.001588031,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","result":"PASS","time":3.80139E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","result":"PASS","time":0.001016751,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","result":"PASS","time":5.21397E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","result":"PASS","time":0.009389877,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","result":"PASS","time":0.011851285,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","result":"PASS","time":8.35393E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","result":"PASS","time":4.21038E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","result":"PASS","time":2.77319E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","result":"PASS","time":0.019392022,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","result":"PASS","time":3.60695E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","result":"PASS","time":0.001154582,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","result":"PASS","time":1.7835E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","result":"PASS","time":2.67488E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","result":"PASS","time":0.231210199,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","result":"PASS","time":0.026442272,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","result":"PASS","time":0.009126266,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","result":"PASS","time":3.3017E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","result":"PASS","time":0.011189216,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","result":"PASS","time":0.02762561,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","result":"PASS","time":0.001421902,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","result":"PASS","time":0.006852003,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","result":"PASS","time":4.02201E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","result":"PASS","time":0.00458798,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()","result":"PASS","time":0.004546078,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","result":"PASS","time":9.59909E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","result":"PASS","time":0.007480652,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","result":"PASS","time":0.005714561,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","result":"PASS","time":3.85265E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","result":"PASS","time":2.13708E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","result":"PASS","time":4.61127E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","result":"PASS","time":0.004704524,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","result":"PASS","time":7.83752E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","result":"PASS","time":0.004693899,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","result":"PASS","time":6.50241E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","result":"PASS","time":0.005727546,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","result":"PASS","time":9.65779E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","result":"PASS","time":0.003748453,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","result":"PASS","time":0.001110466,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","result":"PASS","time":0.012661621,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","result":"PASS","time":4.10761E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","result":"PASS","time":2.23008E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","result":"PASS","time":3.11922E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","result":"PASS","time":6.87238E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","result":"PASS","time":0.005946953,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","result":"PASS","time":3.69944E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","result":"PASS","time":8.79636E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","result":"PASS","time":4.33176E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","result":"PASS","time":2.41738E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","result":"PASS","time":6.7275E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","result":"PASS","time":0.001097716,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","result":"PASS","time":0.004532413,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","result":"PASS","time":5.87087E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","result":"PASS","time":2.56403E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","result":"PASS","time":0.013211104,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","result":"PASS","time":0.002485956,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","result":"PASS","time":0.004724039,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","result":"PASS","time":3.28452E-4,"stackTrace":[]}}}