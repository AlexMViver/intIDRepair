{"id":"1713629832914-e49be741-2c52-4c9f-bb0b-6c0a65f75cc9","testOrder":["org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()"],"results":{"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","result":"PASS","time":3.09986E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","result":"PASS","time":2.80819E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","result":"PASS","time":6.61574E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","result":"PASS","time":0.002313124,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","result":"PASS","time":0.00155235,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","result":"PASS","time":4.11484E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","result":"PASS","time":3.97466E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","result":"PASS","time":9.53301E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","result":"PASS","time":8.64308E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","result":"PASS","time":2.50059E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","result":"PASS","time":0.3461164,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","result":"PASS","time":3.2962E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","result":"PASS","time":2.21694E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","result":"PASS","time":0.010369398,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","result":"PASS","time":1.9701E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","result":"PASS","time":8.1291E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","result":"PASS","time":0.001578561,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","result":"PASS","time":6.16068E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","result":"PASS","time":3.4551E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","result":"PASS","time":4.44166E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","result":"PASS","time":2.10653E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","result":"PASS","time":0.002159321,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","result":"PASS","time":3.95254E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","result":"PASS","time":0.007018873,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","result":"PASS","time":0.028266114,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","result":"PASS","time":0.006299437,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","result":"PASS","time":0.007436968,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","result":"PASS","time":3.67971E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","result":"PASS","time":2.37916E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","result":"PASS","time":3.04703E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","result":"PASS","time":2.54938E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","result":"PASS","time":5.18875E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","result":"PASS","time":5.0758E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","result":"PASS","time":2.70101E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","result":"PASS","time":3.24034E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","result":"PASS","time":0.00367238,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","result":"PASS","time":6.82325E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","result":"PASS","time":0.008255946,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","result":"PASS","time":6.56277E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","result":"PASS","time":0.001661017,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","result":"PASS","time":3.87801E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","result":"PASS","time":6.74264E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","result":"PASS","time":3.75772E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","result":"PASS","time":0.010233149,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","result":"PASS","time":0.014352482,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","result":"PASS","time":6.80227E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","result":"PASS","time":2.99049E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","result":"PASS","time":2.15079E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","result":"PASS","time":0.012438892,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","result":"PASS","time":2.33263E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","result":"PASS","time":8.00153E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","result":"PASS","time":2.92034E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","result":"PASS","time":2.75967E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","result":"PASS","time":0.20247064,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","result":"PASS","time":0.020894216,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","result":"PASS","time":0.006925782,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","result":"PASS","time":4.12667E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","result":"PASS","time":0.008075067,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","result":"PASS","time":0.030968063,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","result":"PASS","time":0.001059779,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","result":"PASS","time":0.007563795,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","result":"PASS","time":3.27977E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","result":"PASS","time":0.004589529,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()","result":"PASS","time":0.004293694,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","result":"PASS","time":9.314E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","result":"PASS","time":0.009524891,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","result":"PASS","time":0.005715839,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","result":"PASS","time":2.60495E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","result":"PASS","time":2.19937E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","result":"PASS","time":0.004508623,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","result":"PASS","time":0.004687299,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","result":"PASS","time":5.06825E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","result":"PASS","time":0.004653023,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","result":"PASS","time":4.01412E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","result":"PASS","time":0.005826153,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","result":"PASS","time":9.93254E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","result":"PASS","time":0.005112138,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","result":"PASS","time":9.42802E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","result":"PASS","time":0.015170829,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","result":"PASS","time":3.93937E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","result":"PASS","time":2.52575E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","result":"PASS","time":3.06636E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","result":"PASS","time":5.03254E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","result":"PASS","time":0.004093417,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","result":"PASS","time":2.30817E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","result":"PASS","time":5.89419E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","result":"PASS","time":2.8121E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","result":"PASS","time":1.88052E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","result":"PASS","time":5.16946E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","result":"PASS","time":8.48323E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","result":"PASS","time":0.00510879,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","result":"PASS","time":4.50644E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","result":"PASS","time":2.97329E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","result":"PASS","time":0.014343211,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","result":"PASS","time":0.002149016,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","result":"PASS","time":0.005683077,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","result":"PASS","time":2.56315E-4,"stackTrace":[]}}}