java.lang.RuntimeException: Set of executed tests is not equal to test list that should have been executed (97 tests executed, 97 tests expected). Missing tests are: Set(org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate, org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal, org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType, org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate, org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt, org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat, org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord, org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime, org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema, org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat, org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema, org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes, org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes, org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue, org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble, org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes, org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat, org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray, org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp, org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType, org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue, org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException, org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema, org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys, org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue, org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility, org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap, org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible, org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar, org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType, org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput, org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues, org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema, org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger, org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice, org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField, org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue, org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues, org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag, org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes)
	at edu.illinois.cs.testrunner.runner.SmartRunner.$anonfun$run$1(SmartRunner.scala:40)
	at scala.util.Success.flatMap(Try.scala:247)
	at edu.illinois.cs.testrunner.runner.SmartRunner.run(SmartRunner.scala:33)
	at edu.illinois.cs.testrunner.runner.Runner.runList(Runner.scala:28)
	at edu.illinois.cs.testrunner.runner.Runner.runList$(Runner.scala:27)
	at edu.illinois.cs.testrunner.runner.SmartRunner.runList(SmartRunner.scala:21)
	at edu.illinois.cs.dt.tools.detection.DetectorUtil.originalResults(DetectorUtil.java:35)
	at edu.illinois.cs.dt.tools.detection.detectors.SmartShuffleDetector.<init>(SmartShuffleDetector.java:27)
	at edu.illinois.cs.dt.tools.detection.detectors.DetectorFactory.makeDetector(DetectorFactory.java:26)
	at edu.illinois.cs.dt.tools.plugin.DetectorMojo.detectorExecute(DetectorMojo.java:292)
	at edu.illinois.cs.dt.tools.plugin.DetectorMojo.lambda$execute$5(DetectorMojo.java:211)
	at edu.illinois.cs.dt.tools.utility.ErrorLogger.runAndLogError(ErrorLogger.java:17)
	at edu.illinois.cs.dt.tools.plugin.DetectorMojo.execute(DetectorMojo.java:211)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:954)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
