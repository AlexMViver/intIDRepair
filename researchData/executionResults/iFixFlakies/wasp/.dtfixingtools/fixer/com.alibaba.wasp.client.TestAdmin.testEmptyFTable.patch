STATUS: CLEANER DOES NOT FIX
MODIFIED: N/A
MODIFIED FILE: N/A
CLEANER: com.alibaba.wasp.meta.TestTableSchemaCacheReader.testTableSchemaCacheReader
CLEANER FILE: /home/alex/Repositories/wasp/src/test/java/com/alibaba/wasp/meta/TestTableSchemaCacheReader.java
POLLUTER: com.alibaba.wasp.client.TestAdmin.testDisableEnableTableHasChilds
POLLUTER FILE: /home/alex/Repositories/wasp/src/test/java/com/alibaba/wasp/client/TestAdmin.java
ORIGINAL CLEANER SIZE: 43
NEW CLEANER SIZE: 43
ELAPSED TIME: 0.0
==========================
@@ -0,0 +0,72 @@
+ {
+     {
+         try {
+             MemFMetaStore fmetaServices = new MemFMetaStore();
+             TableSchemaCacheReader.getInstance(conf, fmetaServices);
+         } catch (Throwable ex) {
+         } finally {
+         }
+     }
+     {
+     }
+     TableSchemaCacheReader reader = TableSchemaCacheReader.getInstance(conf);
+     FTable User = FMetaTestUtil.User;
+     reader.addSchema(User.getTableName(), User);
+     FTable Photo = FMetaTestUtil.Photo;
+     Photo.addIndex(FMetaTestUtil.PhotosByTime);
+     Photo.addIndex(FMetaTestUtil.PhotosByTag);
+     reader.addSchema(Photo.getTableName(), Photo);
+     try {
+         FTable newUser = reader.getSchema(User.getTableName());
+         TestFMetaStore.compare(User, newUser);
+         Set<Index> indexs = reader.getIndexsByField(Photo.getTableName(), "user_id");
+         Assert.assertEquals(indexs.size(), 1);
+         Index i1 = indexs.iterator().next();
+         TestFMetaStore.compare(FMetaTestUtil.PhotosByTime, i1);
+         // no exist column name
+         indexs = reader.getIndexsByField(Photo.getTableName(), "no_exists_user_id");
+         Assert.assertEquals(indexs.size(), 0);
+         Set<Index> indexs2 = reader.getIndexsByField(Photo.getTableName(), "user_id");
+         Assert.assertEquals(indexs2.size(), 1);
+         TestFMetaStore.compare(FMetaTestUtil.PhotosByTime, indexs2.iterator().next());
+         // no exist column name
+         indexs2 = reader.getIndexsByField(Photo.getTableName(), "no_exists_user_id");
+         Assert.assertEquals(indexs2.size(), 0);
+         // No exist tableName
+         FTable noExists = reader.getSchema("noExists");
+         Assert.assertNull(noExists);
+         indexs = reader.getIndexsByField("noExists", "user_id");
+         Assert.assertEquals(indexs.size(), 0);
+         indexs2 = reader.getIndexsByField("noExists", "user_id");
+         Assert.assertEquals(indexs2.size(), 0);
+         // test refreshSchema
+         reader.refreshSchema(User.getTableName());
+         newUser = reader.getSchema(User.getTableName());
+         TestFMetaStore.compare(User, newUser);
+         // No Exception
+         reader.refreshSchema("noExists");
+         newUser = reader.getSchema("noExists");
+         Assert.assertNull(newUser);
+         // test removeSchema
+         newUser = reader.removeSchema(User.getTableName());
+         TestFMetaStore.compare(User, newUser);
+         newUser = reader.getSchema(User.getTableName());
+         Assert.assertNull(newUser);
+         // No Exception
+         reader.removeSchema("noExists");
+         newUser = reader.getSchema("noExists");
+         Assert.assertNull(newUser);
+     } catch (Exception e) {
+         e.printStackTrace();
+         Assert.assertTrue(false);
+     }
+     {
+     }
+     {
+         try {
+             TableSchemaCacheReader.getInstance(conf, null);
+         } catch (Throwable ex) {
+         } finally {
+         }
+     }
+ }
