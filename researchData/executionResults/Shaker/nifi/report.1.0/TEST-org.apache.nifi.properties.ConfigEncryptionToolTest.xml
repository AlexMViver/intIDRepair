<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="org.apache.nifi.properties.ConfigEncryptionToolTest" time="10.005" tests="112" errors="0" skipped="0" failures="0">
  <properties>
    <property name="sun.desktop" value="gnome"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value=""/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/test-classes:/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-flow-encryptor/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-property-encryptor/target/classes:/home/alex/.m2/repository/commons-codec/commons-codec/1.14/commons-codec-1.14.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-properties/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-property-utils/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-properties/target/classes:/home/alex/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/alex/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.69/bcprov-jdk15on-1.69.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-sensitive-property-provider/target/classes:/home/alex/.m2/repository/software/amazon/awssdk/kms/2.17.1/kms-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/aws-json-protocol/2.17.1/aws-json-protocol-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/third-party-jackson-core/2.17.1/third-party-jackson-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/json-utils/2.17.1/json-utils-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/protocol-core/2.17.1/protocol-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/sdk-core/2.17.1/sdk-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/profiles/2.17.1/profiles-2.17.1.jar:/home/alex/.m2/repository/org/reactivestreams/reactive-streams/1.0.3/reactive-streams-1.0.3.jar:/home/alex/.m2/repository/software/amazon/awssdk/auth/2.17.1/auth-2.17.1.jar:/home/alex/.m2/repository/software/amazon/eventstream/eventstream/1.0.1/eventstream-1.0.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/http-client-spi/2.17.1/http-client-spi-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/regions/2.17.1/regions-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/annotations/2.17.1/annotations-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/utils/2.17.1/utils-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/aws-core/2.17.1/aws-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/metrics-spi/2.17.1/metrics-spi-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/secretsmanager/2.17.1/secretsmanager-2.17.1.jar:/home/alex/.m2/repository/com/azure/azure-security-keyvault-secrets/4.3.3/azure-security-keyvault-secrets-4.3.3.jar:/home/alex/.m2/repository/com/azure/azure-core/1.20.0/azure-core-1.20.0.jar:/home/alex/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.12.4/jackson-datatype-jsr310-2.12.4.jar:/home/alex/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.12.4/jackson-dataformat-xml-2.12.4.jar:/home/alex/.m2/repository/io/projectreactor/reactor-core/3.4.9/reactor-core-3.4.9.jar:/home/alex/.m2/repository/com/azure/azure-security-keyvault-keys/4.3.3/azure-security-keyvault-keys-4.3.3.jar:/home/alex/.m2/repository/com/azure/azure-identity/1.3.4/azure-identity-1.3.4.jar:/home/alex/.m2/repository/com/microsoft/azure/msal4j/1.10.1/msal4j-1.10.1.jar:/home/alex/.m2/repository/com/nimbusds/oauth2-oidc-sdk/9.7/oauth2-oidc-sdk-9.7.jar:/home/alex/.m2/repository/com/github/stephenc/jcip/jcip-annotations/1.0-1/jcip-annotations-1.0-1.jar:/home/alex/.m2/repository/com/nimbusds/content-type/2.1/content-type-2.1.jar:/home/alex/.m2/repository/com/nimbusds/lang-tag/1.5/lang-tag-1.5.jar:/home/alex/.m2/repository/com/nimbusds/nimbus-jose-jwt/9.9.3/nimbus-jose-jwt-9.9.3.jar:/home/alex/.m2/repository/com/microsoft/azure/msal4j-persistence-extension/1.1.0/msal4j-persistence-extension-1.1.0.jar:/home/alex/.m2/repository/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar:/home/alex/.m2/repository/net/java/dev/jna/jna-platform/5.6.0/jna-platform-5.6.0.jar:/home/alex/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar:/home/alex/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar:/home/alex/.m2/repository/org/ow2/asm/asm/9.1/asm-9.1.jar:/home/alex/.m2/repository/com/azure/azure-core-http-okhttp/1.7.1/azure-core-http-okhttp-1.7.1.jar:/home/alex/.m2/repository/com/squareup/okhttp3/okhttp/4.8.1/okhttp-4.8.1.jar:/home/alex/.m2/repository/com/squareup/okio/okio/2.7.0/okio-2.7.0.jar:/home/alex/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.3.70/kotlin-stdlib-common-1.3.70.jar:/home/alex/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.3.72/kotlin-stdlib-1.3.72.jar:/home/alex/.m2/repository/org/jetbrains/annotations/13.0/annotations-13.0.jar:/home/alex/.m2/repository/software/amazon/awssdk/url-connection-client/2.17.1/url-connection-client-2.17.1.jar:/home/alex/.m2/repository/com/google/cloud/google-cloud-kms/2.0.2/google-cloud-kms-2.0.2.jar:/home/alex/.m2/repository/io/grpc/grpc-api/1.40.0/grpc-api-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-context/1.40.0/grpc-context-1.40.0.jar:/home/alex/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/alex/.m2/repository/io/grpc/grpc-stub/1.40.0/grpc-stub-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-protobuf/1.40.0/grpc-protobuf-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-protobuf-lite/1.40.0/grpc-protobuf-lite-1.40.0.jar:/home/alex/.m2/repository/com/google/api/api-common/2.0.1/api-common-2.0.1.jar:/home/alex/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/home/alex/.m2/repository/com/google/auto/value/auto-value-annotations/1.8.2/auto-value-annotations-1.8.2.jar:/home/alex/.m2/repository/com/google/protobuf/protobuf-java/3.17.3/protobuf-java-3.17.3.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-common-protos/2.3.2/proto-google-common-protos-2.3.2.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-cloud-kms-v1/0.91.2/proto-google-cloud-kms-v1-0.91.2.jar:/home/alex/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar:/home/alex/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/alex/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/alex/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/home/alex/.m2/repository/com/google/api/gax/2.3.0/gax-2.3.0.jar:/home/alex/.m2/repository/io/opencensus/opencensus-api/0.28.0/opencensus-api-0.28.0.jar:/home/alex/.m2/repository/com/google/api/gax-grpc/2.3.0/gax-grpc-2.3.0.jar:/home/alex/.m2/repository/com/google/auth/google-auth-library-credentials/1.1.0/google-auth-library-credentials-1.1.0.jar:/home/alex/.m2/repository/io/grpc/grpc-netty-shaded/1.40.0/grpc-netty-shaded-1.40.0.jar:/home/alex/.m2/repository/io/perfmark/perfmark-api/0.23.0/perfmark-api-0.23.0.jar:/home/alex/.m2/repository/io/grpc/grpc-core/1.40.0/grpc-core-1.40.0.jar:/home/alex/.m2/repository/com/google/android/annotations/4.1.1.4/annotations-4.1.1.4.jar:/home/alex/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.20/animal-sniffer-annotations-1.20.jar:/home/alex/.m2/repository/io/grpc/grpc-alts/1.40.0/grpc-alts-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-grpclb/1.40.0/grpc-grpclb-1.40.0.jar:/home/alex/.m2/repository/com/google/protobuf/protobuf-java-util/3.17.3/protobuf-java-util-3.17.3.jar:/home/alex/.m2/repository/org/conscrypt/conscrypt-openjdk-uber/2.5.1/conscrypt-openjdk-uber-2.5.1.jar:/home/alex/.m2/repository/org/threeten/threetenbp/1.5.1/threetenbp-1.5.1.jar:/home/alex/.m2/repository/io/grpc/grpc-auth/1.40.0/grpc-auth-1.40.0.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-iam-v1/1.0.14/proto-google-iam-v1-1.0.14.jar:/home/alex/.m2/repository/com/google/auth/google-auth-library-oauth2-http/1.1.0/google-auth-library-oauth2-http-1.1.0.jar:/home/alex/.m2/repository/com/google/http-client/google-http-client/1.39.2/google-http-client-1.39.2.jar:/home/alex/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.28.0/opencensus-contrib-http-util-0.28.0.jar:/home/alex/.m2/repository/com/google/http-client/google-http-client-gson/1.39.2/google-http-client-gson-1.39.2.jar:/home/alex/.m2/repository/com/google/code/gson/gson/2.8.8/gson-2.8.8.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-vault-utils/target/classes:/home/alex/.m2/repository/org/springframework/vault/spring-vault-core/2.3.2/spring-vault-core-2.3.2.jar:/home/alex/.m2/repository/org/springframework/spring-web/5.3.11/spring-web-5.3.11.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-utils/target/classes:/home/alex/Repositories/nifi/nifi-api/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-utils-api/target/classes:/home/alex/.m2/repository/at/favre/lib/bcrypt/0.9.0/bcrypt-0.9.0.jar:/home/alex/.m2/repository/at/favre/lib/bytes/1.3.0/bytes-1.3.0.jar:/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-tls/target/classes:/home/alex/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.69/bcpkix-jdk15on-1.69.jar:/home/alex/.m2/repository/org/bouncycastle/bcutil-jdk15on/1.69/bcutil-jdk15on-1.69.jar:/home/alex/.m2/repository/commons-io/commons-io/2.10.0/commons-io-2.10.0.jar:/home/alex/.m2/repository/org/glassfish/jersey/core/jersey-client/2.33/jersey-client-2.33.jar:/home/alex/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/2.1.6/jakarta.ws.rs-api-2.1.6.jar:/home/alex/.m2/repository/org/glassfish/jersey/core/jersey-common/2.33/jersey-common-2.33.jar:/home/alex/.m2/repository/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar:/home/alex/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar:/home/alex/.m2/repository/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/jersey/inject/jersey-hk2/2.33/jersey-hk2-2.33.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-locator/2.6.1/hk2-locator-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/external/aopalliance-repackaged/2.6.1/aopalliance-repackaged-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-api/2.6.1/hk2-api-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-utils/2.6.1/hk2-utils-2.6.1.jar:/home/alex/.m2/repository/org/javassist/javassist/3.25.0-GA/javassist-3.25.0-GA.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.12.3/jackson-databind-2.12.3.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.12.3/jackson-annotations-2.12.3.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar:/home/alex/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar:/home/alex/.m2/repository/com/github/stefanbirkner/system-rules/1.19.0/system-rules-1.19.0.jar:/home/alex/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-parameter/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/target/classes:/home/alex/Repositories/nifi/nifi-framework-api/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-web-utils/target/classes:/home/alex/.m2/repository/org/quartz-scheduler/quartz/2.3.2/quartz-2.3.2.jar:/home/alex/.m2/repository/com/mchange/c3p0/0.9.5.4/c3p0-0.9.5.4.jar:/home/alex/.m2/repository/com/mchange/mchange-commons-java/0.2.15/mchange-commons-java-0.2.15.jar:/home/alex/.m2/repository/com/zaxxer/HikariCP-java7/2.4.13/HikariCP-java7-2.4.13.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-expression-language/target/classes:/home/alex/.m2/repository/org/antlr/antlr-runtime/3.5.2/antlr-runtime-3.5.2.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-uuid5/target/classes:/home/alex/.m2/repository/com/jayway/jsonpath/json-path/2.6.0/json-path-2.6.0.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-schema-utils/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-repository-models/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-kms/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-repository-encryption/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-socket-utils/target/classes:/home/alex/.m2/repository/commons-net/commons-net/3.6/commons-net-3.6.jar:/home/alex/.m2/repository/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.12.3/jackson-module-jaxb-annotations-2.12.3.jar:/home/alex/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/2.3.2/jakarta.xml.bind-api-2.3.2.jar:/home/alex/.m2/repository/jakarta/activation/jakarta.activation-api/1.2.1/jakarta.activation-api-1.2.1.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-logging-utils/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/target/classes:/home/alex/.m2/repository/io/swagger/swagger-annotations/1.6.0/swagger-annotations-1.6.0.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-site-to-site-client/target/classes:/home/alex/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.1.4/httpasyncclient-4.1.4.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.4.10/httpcore-nio-4.4.10.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/target/classes:/home/alex/.m2/repository/org/springframework/spring-aop/5.3.11/spring-aop-5.3.11.jar:/home/alex/.m2/repository/org/aspectj/aspectjweaver/1.9.6/aspectjweaver-1.9.6.jar:/home/alex/.m2/repository/org/springframework/security/spring-security-core/5.5.2/spring-security-core-5.5.2.jar:/home/alex/.m2/repository/org/springframework/security/spring-security-crypto/5.5.2/spring-security-crypto-5.5.2.jar:/home/alex/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/home/alex/.m2/repository/com/h2database/h2/1.4.199/h2-1.4.199.jar:/home/alex/.m2/repository/org/springframework/spring-core/5.3.11/spring-core-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-jcl/5.3.11/spring-jcl-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-beans/5.3.11/spring-beans-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-context/5.3.11/spring-context-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-expression/5.3.11/spring-expression-5.3.11.jar:/home/alex/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/home/alex/.m2/repository/org/questdb/core/4.2.1/core-4.2.1.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-data-provenance-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-write-ahead-log/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-rocksdb-utils/target/classes:/home/alex/.m2/repository/org/rocksdb/rocksdbjni/6.6.4/rocksdbjni-6.6.4.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/target/classes:/home/alex/.m2/repository/org/apache/zookeeper/zookeeper/3.5.9/zookeeper-3.5.9.jar:/home/alex/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.5.9/zookeeper-jute-3.5.9.jar:/home/alex/.m2/repository/org/apache/yetus/audience-annotations/0.5.0/audience-annotations-0.5.0.jar:/home/alex/.m2/repository/io/netty/netty-handler/4.1.50.Final/netty-handler-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-common/4.1.50.Final/netty-common-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-resolver/4.1.50.Final/netty-resolver-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-buffer/4.1.50.Final/netty-buffer-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport/4.1.50.Final/netty-transport-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-codec/4.1.50.Final/netty-codec-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport-native-epoll/4.1.50.Final/netty-transport-native-epoll-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.50.Final/netty-transport-native-unix-common-4.1.50.Final.jar:/home/alex/.m2/repository/org/apache/curator/curator-framework/5.2.0/curator-framework-5.2.0.jar:/home/alex/.m2/repository/org/apache/curator/curator-client/5.2.0/curator-client-5.2.0.jar:/home/alex/.m2/repository/org/apache/curator/curator-recipes/5.2.0/curator-recipes-5.2.0.jar:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-data-model/target/classes:/home/alex/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/home/alex/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.1/javax.ws.rs-api-2.1.jar:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-revision/nifi-registry-revision-entity-model/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-flow-diff/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-client/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-security-utils/target/classes:/home/alex/.m2/repository/org/glassfish/jersey/media/jersey-media-json-jackson/2.33/jersey-media-json-jackson-2.33.jar:/home/alex/.m2/repository/org/glassfish/jersey/ext/jersey-entity-filtering/2.33/jersey-entity-filtering-2.33.jar:/home/alex/.m2/repository/org/glassfish/jersey/media/jersey-media-multipart/2.33/jersey-media-multipart-2.33.jar:/home/alex/.m2/repository/org/jvnet/mimepull/mimepull/1.9.13/mimepull-1.9.13.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.3/jackson-core-2.12.3.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization-providers/target/classes:/home/alex/.m2/repository/com/github/ben-manes/caffeine/caffeine/2.8.1/caffeine-2.8.1.jar:/home/alex/.m2/repository/org/checkerframework/checker-qual/3.1.0/checker-qual-3.1.0.jar:/home/alex/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.4/error_prone_annotations-2.3.4.jar:/home/alex/.m2/repository/org/apache/commons/commons-configuration2/2.7/commons-configuration2-2.7.jar:/home/alex/.m2/repository/org/apache/commons/commons-text/1.8/commons-text-1.8.jar:/home/alex/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/alex/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/home/alex/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/home/alex/.m2/repository/org/spockframework/spock-core/1.3-groovy-2.5/spock-core-1.3-groovy-2.5.jar:/home/alex/.m2/repository/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar:/home/alex/.m2/repository/org/xmlunit/xmlunit-core/2.6.3/xmlunit-core-2.6.3.jar:/home/alex/.m2/repository/org/xmlunit/xmlunit-matchers/2.6.3/xmlunit-matchers-2.6.3.jar:/home/alex/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy/2.5.14/groovy-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-ant/2.5.14/groovy-ant-2.5.14.jar:/home/alex/.m2/repository/org/apache/ant/ant/1.9.15/ant-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-junit/1.9.15/ant-junit-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-launcher/1.9.15/ant-launcher-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-antlr/1.9.15/ant-antlr-1.9.15.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-cli-commons/2.5.14/groovy-cli-commons-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-cli-picocli/2.5.14/groovy-cli-picocli-2.5.14.jar:/home/alex/.m2/repository/info/picocli/picocli/4.3.2/picocli-4.3.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-console/2.5.14/groovy-console-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-datetime/2.5.14/groovy-datetime-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-docgenerator/2.5.14/groovy-docgenerator-2.5.14.jar:/home/alex/.m2/repository/com/thoughtworks/qdox/qdox/1.12.1/qdox-1.12.1.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-groovydoc/2.5.14/groovy-groovydoc-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-groovysh/2.5.14/groovy-groovysh-2.5.14.jar:/home/alex/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-jmx/2.5.14/groovy-jmx-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-json/2.5.14/groovy-json-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-jsr223/2.5.14/groovy-jsr223-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-macro/2.5.14/groovy-macro-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-nio/2.5.14/groovy-nio-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-servlet/2.5.14/groovy-servlet-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-sql/2.5.14/groovy-sql-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-swing/2.5.14/groovy-swing-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-templates/2.5.14/groovy-templates-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-test-junit5/2.5.14/groovy-test-junit5-2.5.14.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-launcher/1.7.2/junit-platform-launcher-1.7.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-testng/2.5.14/groovy-testng-2.5.14.jar:/home/alex/.m2/repository/org/testng/testng/6.13.1/testng-6.13.1.jar:/home/alex/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-xml/2.5.14/groovy-xml-2.5.14.jar:/home/alex/.m2/repository/org/slf4j/slf4j-simple/1.7.32/slf4j-simple-1.7.32.jar:/home/alex/.m2/repository/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.7.2/junit-jupiter-api-5.7.2.jar:/home/alex/.m2/repository/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar:/home/alex/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-commons/1.7.2/junit-platform-commons-1.7.2.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.7.2/junit-jupiter-engine-5.7.2.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-engine/1.7.2/junit-platform-engine-1.7.2.jar:/home/alex/.m2/repository/org/junit/vintage/junit-vintage-engine/5.7.2/junit-vintage-engine-5.7.2.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.7.2/junit-jupiter-params-5.7.2.jar:/home/alex/.m2/repository/org/mockito/mockito-core/3.11.2/mockito-core-3.11.2.jar:/home/alex/.m2/repository/net/bytebuddy/byte-buddy/1.11.3/byte-buddy-1.11.3.jar:/home/alex/.m2/repository/net/bytebuddy/byte-buddy-agent/1.11.3/byte-buddy-agent-1.11.3.jar:/home/alex/.m2/repository/org/objenesis/objenesis/3.2/objenesis-3.2.jar:/home/alex/.m2/repository/org/mockito/mockito-junit-jupiter/3.11.2/mockito-junit-jupiter-3.11.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-test/2.5.14/groovy-test-2.5.14.jar:"/>
    <property name="java.vm.vendor" value="Private Build"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/Lisbon"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Linux"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"/>
    <property name="sun.java.command" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/surefire/surefirebooter3110270310003784330.jar /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/surefire 2024-05-02T01-50-21_887-jvmRun1 surefire2109333257784514578tmp surefire_1905944510355727714059tmp"/>
    <property name="surefire.test.class.path" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/test-classes:/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-flow-encryptor/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-property-encryptor/target/classes:/home/alex/.m2/repository/commons-codec/commons-codec/1.14/commons-codec-1.14.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-properties/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-property-utils/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-properties/target/classes:/home/alex/.m2/repository/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/home/alex/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.69/bcprov-jdk15on-1.69.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-sensitive-property-provider/target/classes:/home/alex/.m2/repository/software/amazon/awssdk/kms/2.17.1/kms-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/aws-json-protocol/2.17.1/aws-json-protocol-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/third-party-jackson-core/2.17.1/third-party-jackson-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/json-utils/2.17.1/json-utils-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/protocol-core/2.17.1/protocol-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/sdk-core/2.17.1/sdk-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/profiles/2.17.1/profiles-2.17.1.jar:/home/alex/.m2/repository/org/reactivestreams/reactive-streams/1.0.3/reactive-streams-1.0.3.jar:/home/alex/.m2/repository/software/amazon/awssdk/auth/2.17.1/auth-2.17.1.jar:/home/alex/.m2/repository/software/amazon/eventstream/eventstream/1.0.1/eventstream-1.0.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/http-client-spi/2.17.1/http-client-spi-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/regions/2.17.1/regions-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/annotations/2.17.1/annotations-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/utils/2.17.1/utils-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/aws-core/2.17.1/aws-core-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/metrics-spi/2.17.1/metrics-spi-2.17.1.jar:/home/alex/.m2/repository/software/amazon/awssdk/secretsmanager/2.17.1/secretsmanager-2.17.1.jar:/home/alex/.m2/repository/com/azure/azure-security-keyvault-secrets/4.3.3/azure-security-keyvault-secrets-4.3.3.jar:/home/alex/.m2/repository/com/azure/azure-core/1.20.0/azure-core-1.20.0.jar:/home/alex/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.12.4/jackson-datatype-jsr310-2.12.4.jar:/home/alex/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-xml/2.12.4/jackson-dataformat-xml-2.12.4.jar:/home/alex/.m2/repository/io/projectreactor/reactor-core/3.4.9/reactor-core-3.4.9.jar:/home/alex/.m2/repository/com/azure/azure-security-keyvault-keys/4.3.3/azure-security-keyvault-keys-4.3.3.jar:/home/alex/.m2/repository/com/azure/azure-identity/1.3.4/azure-identity-1.3.4.jar:/home/alex/.m2/repository/com/microsoft/azure/msal4j/1.10.1/msal4j-1.10.1.jar:/home/alex/.m2/repository/com/nimbusds/oauth2-oidc-sdk/9.7/oauth2-oidc-sdk-9.7.jar:/home/alex/.m2/repository/com/github/stephenc/jcip/jcip-annotations/1.0-1/jcip-annotations-1.0-1.jar:/home/alex/.m2/repository/com/nimbusds/content-type/2.1/content-type-2.1.jar:/home/alex/.m2/repository/com/nimbusds/lang-tag/1.5/lang-tag-1.5.jar:/home/alex/.m2/repository/com/nimbusds/nimbus-jose-jwt/9.9.3/nimbus-jose-jwt-9.9.3.jar:/home/alex/.m2/repository/com/microsoft/azure/msal4j-persistence-extension/1.1.0/msal4j-persistence-extension-1.1.0.jar:/home/alex/.m2/repository/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar:/home/alex/.m2/repository/net/java/dev/jna/jna-platform/5.6.0/jna-platform-5.6.0.jar:/home/alex/.m2/repository/net/minidev/json-smart/2.4.7/json-smart-2.4.7.jar:/home/alex/.m2/repository/net/minidev/accessors-smart/2.4.7/accessors-smart-2.4.7.jar:/home/alex/.m2/repository/org/ow2/asm/asm/9.1/asm-9.1.jar:/home/alex/.m2/repository/com/azure/azure-core-http-okhttp/1.7.1/azure-core-http-okhttp-1.7.1.jar:/home/alex/.m2/repository/com/squareup/okhttp3/okhttp/4.8.1/okhttp-4.8.1.jar:/home/alex/.m2/repository/com/squareup/okio/okio/2.7.0/okio-2.7.0.jar:/home/alex/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.3.70/kotlin-stdlib-common-1.3.70.jar:/home/alex/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.3.72/kotlin-stdlib-1.3.72.jar:/home/alex/.m2/repository/org/jetbrains/annotations/13.0/annotations-13.0.jar:/home/alex/.m2/repository/software/amazon/awssdk/url-connection-client/2.17.1/url-connection-client-2.17.1.jar:/home/alex/.m2/repository/com/google/cloud/google-cloud-kms/2.0.2/google-cloud-kms-2.0.2.jar:/home/alex/.m2/repository/io/grpc/grpc-api/1.40.0/grpc-api-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-context/1.40.0/grpc-context-1.40.0.jar:/home/alex/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/alex/.m2/repository/io/grpc/grpc-stub/1.40.0/grpc-stub-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-protobuf/1.40.0/grpc-protobuf-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-protobuf-lite/1.40.0/grpc-protobuf-lite-1.40.0.jar:/home/alex/.m2/repository/com/google/api/api-common/2.0.1/api-common-2.0.1.jar:/home/alex/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/home/alex/.m2/repository/com/google/auto/value/auto-value-annotations/1.8.2/auto-value-annotations-1.8.2.jar:/home/alex/.m2/repository/com/google/protobuf/protobuf-java/3.17.3/protobuf-java-3.17.3.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-common-protos/2.3.2/proto-google-common-protos-2.3.2.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-cloud-kms-v1/0.91.2/proto-google-cloud-kms-v1-0.91.2.jar:/home/alex/.m2/repository/com/google/guava/guava/30.1.1-jre/guava-30.1.1-jre.jar:/home/alex/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/alex/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/alex/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/home/alex/.m2/repository/com/google/api/gax/2.3.0/gax-2.3.0.jar:/home/alex/.m2/repository/io/opencensus/opencensus-api/0.28.0/opencensus-api-0.28.0.jar:/home/alex/.m2/repository/com/google/api/gax-grpc/2.3.0/gax-grpc-2.3.0.jar:/home/alex/.m2/repository/com/google/auth/google-auth-library-credentials/1.1.0/google-auth-library-credentials-1.1.0.jar:/home/alex/.m2/repository/io/grpc/grpc-netty-shaded/1.40.0/grpc-netty-shaded-1.40.0.jar:/home/alex/.m2/repository/io/perfmark/perfmark-api/0.23.0/perfmark-api-0.23.0.jar:/home/alex/.m2/repository/io/grpc/grpc-core/1.40.0/grpc-core-1.40.0.jar:/home/alex/.m2/repository/com/google/android/annotations/4.1.1.4/annotations-4.1.1.4.jar:/home/alex/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.20/animal-sniffer-annotations-1.20.jar:/home/alex/.m2/repository/io/grpc/grpc-alts/1.40.0/grpc-alts-1.40.0.jar:/home/alex/.m2/repository/io/grpc/grpc-grpclb/1.40.0/grpc-grpclb-1.40.0.jar:/home/alex/.m2/repository/com/google/protobuf/protobuf-java-util/3.17.3/protobuf-java-util-3.17.3.jar:/home/alex/.m2/repository/org/conscrypt/conscrypt-openjdk-uber/2.5.1/conscrypt-openjdk-uber-2.5.1.jar:/home/alex/.m2/repository/org/threeten/threetenbp/1.5.1/threetenbp-1.5.1.jar:/home/alex/.m2/repository/io/grpc/grpc-auth/1.40.0/grpc-auth-1.40.0.jar:/home/alex/.m2/repository/com/google/api/grpc/proto-google-iam-v1/1.0.14/proto-google-iam-v1-1.0.14.jar:/home/alex/.m2/repository/com/google/auth/google-auth-library-oauth2-http/1.1.0/google-auth-library-oauth2-http-1.1.0.jar:/home/alex/.m2/repository/com/google/http-client/google-http-client/1.39.2/google-http-client-1.39.2.jar:/home/alex/.m2/repository/io/opencensus/opencensus-contrib-http-util/0.28.0/opencensus-contrib-http-util-0.28.0.jar:/home/alex/.m2/repository/com/google/http-client/google-http-client-gson/1.39.2/google-http-client-gson-1.39.2.jar:/home/alex/.m2/repository/com/google/code/gson/gson/2.8.8/gson-2.8.8.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-vault-utils/target/classes:/home/alex/.m2/repository/org/springframework/vault/spring-vault-core/2.3.2/spring-vault-core-2.3.2.jar:/home/alex/.m2/repository/org/springframework/spring-web/5.3.11/spring-web-5.3.11.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-properties-loader/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-utils/target/classes:/home/alex/Repositories/nifi/nifi-api/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-utils-api/target/classes:/home/alex/.m2/repository/at/favre/lib/bcrypt/0.9.0/bcrypt-0.9.0.jar:/home/alex/.m2/repository/at/favre/lib/bytes/1.3.0/bytes-1.3.0.jar:/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-tls/target/classes:/home/alex/.m2/repository/org/bouncycastle/bcpkix-jdk15on/1.69/bcpkix-jdk15on-1.69.jar:/home/alex/.m2/repository/org/bouncycastle/bcutil-jdk15on/1.69/bcutil-jdk15on-1.69.jar:/home/alex/.m2/repository/commons-io/commons-io/2.10.0/commons-io-2.10.0.jar:/home/alex/.m2/repository/org/glassfish/jersey/core/jersey-client/2.33/jersey-client-2.33.jar:/home/alex/.m2/repository/jakarta/ws/rs/jakarta.ws.rs-api/2.1.6/jakarta.ws.rs-api-2.1.6.jar:/home/alex/.m2/repository/org/glassfish/jersey/core/jersey-common/2.33/jersey-common-2.33.jar:/home/alex/.m2/repository/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar:/home/alex/.m2/repository/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar:/home/alex/.m2/repository/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/jersey/inject/jersey-hk2/2.33/jersey-hk2-2.33.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-locator/2.6.1/hk2-locator-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/external/aopalliance-repackaged/2.6.1/aopalliance-repackaged-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-api/2.6.1/hk2-api-2.6.1.jar:/home/alex/.m2/repository/org/glassfish/hk2/hk2-utils/2.6.1/hk2-utils-2.6.1.jar:/home/alex/.m2/repository/org/javassist/javassist/3.25.0-GA/javassist-3.25.0-GA.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.12.3/jackson-databind-2.12.3.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.12.3/jackson-annotations-2.12.3.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar:/home/alex/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar:/home/alex/.m2/repository/com/github/stefanbirkner/system-rules/1.19.0/system-rules-1.19.0.jar:/home/alex/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-parameter/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-components/target/classes:/home/alex/Repositories/nifi/nifi-framework-api/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-web-utils/target/classes:/home/alex/.m2/repository/org/quartz-scheduler/quartz/2.3.2/quartz-2.3.2.jar:/home/alex/.m2/repository/com/mchange/c3p0/0.9.5.4/c3p0-0.9.5.4.jar:/home/alex/.m2/repository/com/mchange/mchange-commons-java/0.2.15/mchange-commons-java-0.2.15.jar:/home/alex/.m2/repository/com/zaxxer/HikariCP-java7/2.4.13/HikariCP-java7-2.4.13.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-expression-language/target/classes:/home/alex/.m2/repository/org/antlr/antlr-runtime/3.5.2/antlr-runtime-3.5.2.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-uuid5/target/classes:/home/alex/.m2/repository/com/jayway/jsonpath/json-path/2.6.0/json-path-2.6.0.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-schema-utils/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-repository-models/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-security-kms/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-repository-encryption/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-site-to-site/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster-protocol/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-socket-utils/target/classes:/home/alex/.m2/repository/commons-net/commons-net/3.6/commons-net-3.6.jar:/home/alex/.m2/repository/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.12.3/jackson-module-jaxb-annotations-2.12.3.jar:/home/alex/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/2.3.2/jakarta.xml.bind-api-2.3.2.jar:/home/alex/.m2/repository/jakarta/activation/jakarta.activation-api/1.2.1/jakarta.activation-api-1.2.1.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-logging-utils/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/target/classes:/home/alex/.m2/repository/io/swagger/swagger-annotations/1.6.0/swagger-annotations-1.6.0.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-site-to-site-client/target/classes:/home/alex/.m2/repository/org/apache/httpcomponents/httpasyncclient/4.1.4/httpasyncclient-4.1.4.jar:/home/alex/.m2/repository/org/apache/httpcomponents/httpcore-nio/4.4.10/httpcore-nio-4.4.10.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-administration/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-user-actions/target/classes:/home/alex/.m2/repository/org/springframework/spring-aop/5.3.11/spring-aop-5.3.11.jar:/home/alex/.m2/repository/org/aspectj/aspectjweaver/1.9.6/aspectjweaver-1.9.6.jar:/home/alex/.m2/repository/org/springframework/security/spring-security-core/5.5.2/spring-security-core-5.5.2.jar:/home/alex/.m2/repository/org/springframework/security/spring-security-crypto/5.5.2/spring-security-crypto-5.5.2.jar:/home/alex/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/home/alex/.m2/repository/com/h2database/h2/1.4.199/h2-1.4.199.jar:/home/alex/.m2/repository/org/springframework/spring-core/5.3.11/spring-core-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-jcl/5.3.11/spring-jcl-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-beans/5.3.11/spring-beans-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-context/5.3.11/spring-context-5.3.11.jar:/home/alex/.m2/repository/org/springframework/spring-expression/5.3.11/spring-expression-5.3.11.jar:/home/alex/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/home/alex/.m2/repository/org/questdb/core/4.2.1/core-4.2.1.jar:/home/alex/Repositories/nifi/nifi-commons/nifi-data-provenance-utils/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-write-ahead-log/target/classes:/home/alex/Repositories/nifi/nifi-commons/nifi-rocksdb-utils/target/classes:/home/alex/.m2/repository/org/rocksdb/rocksdbjni/6.6.4/rocksdbjni-6.6.4.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-flowfile-repo-serialization/target/classes:/home/alex/.m2/repository/org/apache/zookeeper/zookeeper/3.5.9/zookeeper-3.5.9.jar:/home/alex/.m2/repository/org/apache/zookeeper/zookeeper-jute/3.5.9/zookeeper-jute-3.5.9.jar:/home/alex/.m2/repository/org/apache/yetus/audience-annotations/0.5.0/audience-annotations-0.5.0.jar:/home/alex/.m2/repository/io/netty/netty-handler/4.1.50.Final/netty-handler-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-common/4.1.50.Final/netty-common-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-resolver/4.1.50.Final/netty-resolver-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-buffer/4.1.50.Final/netty-buffer-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport/4.1.50.Final/netty-transport-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-codec/4.1.50.Final/netty-codec-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport-native-epoll/4.1.50.Final/netty-transport-native-epoll-4.1.50.Final.jar:/home/alex/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.50.Final/netty-transport-native-unix-common-4.1.50.Final.jar:/home/alex/.m2/repository/org/apache/curator/curator-framework/5.2.0/curator-framework-5.2.0.jar:/home/alex/.m2/repository/org/apache/curator/curator-client/5.2.0/curator-client-5.2.0.jar:/home/alex/.m2/repository/org/apache/curator/curator-recipes/5.2.0/curator-recipes-5.2.0.jar:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-data-model/target/classes:/home/alex/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/home/alex/.m2/repository/javax/ws/rs/javax.ws.rs-api/2.1/javax.ws.rs-api-2.1.jar:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-revision/nifi-registry-revision-entity-model/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-flow-diff/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-client/target/classes:/home/alex/Repositories/nifi/nifi-registry/nifi-registry-core/nifi-registry-security-utils/target/classes:/home/alex/.m2/repository/org/glassfish/jersey/media/jersey-media-json-jackson/2.33/jersey-media-json-jackson-2.33.jar:/home/alex/.m2/repository/org/glassfish/jersey/ext/jersey-entity-filtering/2.33/jersey-entity-filtering-2.33.jar:/home/alex/.m2/repository/org/glassfish/jersey/media/jersey-media-multipart/2.33/jersey-media-multipart-2.33.jar:/home/alex/.m2/repository/org/jvnet/mimepull/mimepull/1.9.13/mimepull-1.9.13.jar:/home/alex/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.3/jackson-core-2.12.3.jar:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-authorizer/target/classes:/home/alex/Repositories/nifi/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-authorization-providers/target/classes:/home/alex/.m2/repository/com/github/ben-manes/caffeine/caffeine/2.8.1/caffeine-2.8.1.jar:/home/alex/.m2/repository/org/checkerframework/checker-qual/3.1.0/checker-qual-3.1.0.jar:/home/alex/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.4/error_prone_annotations-2.3.4.jar:/home/alex/.m2/repository/org/apache/commons/commons-configuration2/2.7/commons-configuration2-2.7.jar:/home/alex/.m2/repository/org/apache/commons/commons-text/1.8/commons-text-1.8.jar:/home/alex/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/alex/.m2/repository/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar:/home/alex/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/home/alex/.m2/repository/org/spockframework/spock-core/1.3-groovy-2.5/spock-core-1.3-groovy-2.5.jar:/home/alex/.m2/repository/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar:/home/alex/.m2/repository/org/xmlunit/xmlunit-core/2.6.3/xmlunit-core-2.6.3.jar:/home/alex/.m2/repository/org/xmlunit/xmlunit-matchers/2.6.3/xmlunit-matchers-2.6.3.jar:/home/alex/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy/2.5.14/groovy-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-ant/2.5.14/groovy-ant-2.5.14.jar:/home/alex/.m2/repository/org/apache/ant/ant/1.9.15/ant-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-junit/1.9.15/ant-junit-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-launcher/1.9.15/ant-launcher-1.9.15.jar:/home/alex/.m2/repository/org/apache/ant/ant-antlr/1.9.15/ant-antlr-1.9.15.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-cli-commons/2.5.14/groovy-cli-commons-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-cli-picocli/2.5.14/groovy-cli-picocli-2.5.14.jar:/home/alex/.m2/repository/info/picocli/picocli/4.3.2/picocli-4.3.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-console/2.5.14/groovy-console-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-datetime/2.5.14/groovy-datetime-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-docgenerator/2.5.14/groovy-docgenerator-2.5.14.jar:/home/alex/.m2/repository/com/thoughtworks/qdox/qdox/1.12.1/qdox-1.12.1.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-groovydoc/2.5.14/groovy-groovydoc-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-groovysh/2.5.14/groovy-groovysh-2.5.14.jar:/home/alex/.m2/repository/jline/jline/2.14.6/jline-2.14.6.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-jmx/2.5.14/groovy-jmx-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-json/2.5.14/groovy-json-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-jsr223/2.5.14/groovy-jsr223-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-macro/2.5.14/groovy-macro-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-nio/2.5.14/groovy-nio-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-servlet/2.5.14/groovy-servlet-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-sql/2.5.14/groovy-sql-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-swing/2.5.14/groovy-swing-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-templates/2.5.14/groovy-templates-2.5.14.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-test-junit5/2.5.14/groovy-test-junit5-2.5.14.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-launcher/1.7.2/junit-platform-launcher-1.7.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-testng/2.5.14/groovy-testng-2.5.14.jar:/home/alex/.m2/repository/org/testng/testng/6.13.1/testng-6.13.1.jar:/home/alex/.m2/repository/com/beust/jcommander/1.72/jcommander-1.72.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-xml/2.5.14/groovy-xml-2.5.14.jar:/home/alex/.m2/repository/org/slf4j/slf4j-simple/1.7.32/slf4j-simple-1.7.32.jar:/home/alex/.m2/repository/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.7.2/junit-jupiter-api-5.7.2.jar:/home/alex/.m2/repository/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar:/home/alex/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-commons/1.7.2/junit-platform-commons-1.7.2.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.7.2/junit-jupiter-engine-5.7.2.jar:/home/alex/.m2/repository/org/junit/platform/junit-platform-engine/1.7.2/junit-platform-engine-1.7.2.jar:/home/alex/.m2/repository/org/junit/vintage/junit-vintage-engine/5.7.2/junit-vintage-engine-5.7.2.jar:/home/alex/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.7.2/junit-jupiter-params-5.7.2.jar:/home/alex/.m2/repository/org/mockito/mockito-core/3.11.2/mockito-core-3.11.2.jar:/home/alex/.m2/repository/net/bytebuddy/byte-buddy/1.11.3/byte-buddy-1.11.3.jar:/home/alex/.m2/repository/net/bytebuddy/byte-buddy-agent/1.11.3/byte-buddy-agent-1.11.3.jar:/home/alex/.m2/repository/org/objenesis/objenesis/3.2/objenesis-3.2.jar:/home/alex/.m2/repository/org/mockito/mockito-junit-jupiter/3.11.2/mockito-junit-jupiter-3.11.2.jar:/home/alex/.m2/repository/org/codehaus/groovy/groovy-test/2.5.14/groovy-test-2.5.14.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/alex"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk-amd64/jre"/>
    <property name="basedir" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config"/>
    <property name="file.separator" value="/"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/surefire/surefirebooter3110270310003784330.jar"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_402-8u402-ga-2ubuntu1~22.04-b06"/>
    <property name="java.net.preferIPv4Stack" value="true"/>
    <property name="user.name" value="alex"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.5.0-28-generic"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/home/alex/.m2/repository"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="1.8.0_402"/>
    <property name="user.dir" value="/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Private Build"/>
    <property name="java.vm.version" value="25.402-b06"/>
    <property name="java.specification.maintenance.version" value="5"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="testShouldPerformFullOperationOnFlowXmlWithSameSensitivePropsKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.45">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:, nifi.security.keystorePasswd:, nifi.security.truststorePasswd:, nifi.sensitive.props.key:, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=
nifi.sensitive.props.key.protected=
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=
nifi.security.keystoreType=
nifi.security.keystorePasswd=
nifi.security.keyPasswd=
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 83 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}, enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{c0b699d5ed247a00d5b3171271b3efd98d1425d0f67d3a8369ea25e6bc40d21535d94c1fa74f77bdf9de49c54e6c00c9}, enc{c96e0c2b81bf7a1f3a78380926735c9ac8c8c4357082b07369c2dd0fc6ef823d2924f5f5517a525774a4ebd3d52ed6f4}]
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFromPasswordToPassword" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="1.408">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key derived from password [thisIsABadPassword]: 	2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migration key derived from password [drowssaPdaBAsIsiht]: 	7696EBC090B471D068F17CF1E6FA10CD9CBC7300B1F88171E3D597C0472C9747
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Running [password to password] with args: [-n, src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties, -b, target/tmp/tmp_bootstrap.conf, -o, target/tmp/tmp_nifi.properties, -m, -v, -w, thisIsABadPassword, -p, drowssaPdaBAsIsiht]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating key (password to password) with -n src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties -b target/tmp/tmp_bootstrap.conf -o target/tmp/tmp_nifi.properties -m -v -w thisIsABadPassword -p drowssaPdaBAsIsiht
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	cOUNzrhZMpe20B7q||/YTzzLohgsdRMOlmoitJPhYvXLsuvClh8ddcg+Y7fmUvHmi07w
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	huFpUjDpzQVEvm1F||ZFsK0zp9uA/FrAcGf2qrYqnjiVVv/pTlkutBXeB7KiM8pHZV47zsX/Nc
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	efXSPEmmhjOnKEQi||PLhZOBRSI/a/yxvXmRnDtIWCpoH/GbjyixLjXYR5LUbvfr4n+hDIaw8jGLu0Bg
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=efXSPEmmhjOnKEQi||PLhZOBRSI/a/yxvXmRnDtIWCpoH/GbjyixLjXYR5LUbvfr4n+hDIaw8jGLu0Bg
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=huFpUjDpzQVEvm1F||ZFsK0zp9uA/FrAcGf2qrYqnjiVVv/pTlkutBXeB7KiM8pHZV47zsX/Nc
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=cOUNzrhZMpe20B7q||/YTzzLohgsdRMOlmoitJPhYvXLsuvClh8ddcg+Y7fmUvHmi07w
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=7696EBC090B471D068F17CF1E6FA10CD9CBC7300B1F88171E3D597C0472C9747
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationForLoginIdentityProviders" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.419">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: src/test/resources/login-identity-providers-populated.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: target/tmp/tmp-lip.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded login identity providers content (105 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">8LGAoBBei/r0EkVI||veWye8aP1kwNi8UzFrdmzvU+o3f5pRzpdUhO4CDienJI4g</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">NavZejbl5k5WyujF||k8Zv3WfSb/ZCyHBpboMSeMzDBVvOm+R9GmoqCfOnrtt7cw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">ML1ftU0EKC3d8GBG||nNPpS5cS4KADGp+XaxGtA+QfkC0SaX9WJChKacV6GenQRg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">8LGAoBBei/r0EkVI||veWye8aP1kwNi8UzFrdmzvU+o3f5pRzpdUhO4CDienJI4g</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">NavZejbl5k5WyujF||k8Zv3WfSb/ZCyHBpboMSeMzDBVvOm+R9GmoqCfOnrtt7cw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">ML1ftU0EKC3d8GBG||nNPpS5cS4KADGp+XaxGtA+QfkC0SaX9WJChKacV6GenQRg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldTranslateCliWithPlaintextInputWithoutBootstrapConf" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.105">
    <system-out><![CDATA[baseUrl=https://nifi.nifi.apache.org:8443
keystore=/path/to/keystore.jks
keystoreType=JKS
keystorePasswd=thisIsABadKeystorePassword
keyPasswd=thisIsABadKeyPassword
truststore=
truststoreType=
truststorePasswd=
proxiedEntity=
Tried to exit with status 0.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi_with_sensitive_properties_unprotected.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No root key detected in null -- if src/test/resources/nifi_with_sensitive_properties_unprotected.properties is encrypted, the translation will fail
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - STDOUT:
	baseUrl=https://nifi.nifi.apache.org:8443
	keystore=/path/to/keystore.jks
	keystoreType=JKS
	keystorePasswd=thisIsABadKeystorePassword
	keyPasswd=thisIsABadKeyPassword
	truststore=
	truststoreType=
	truststorePasswd=
	proxiedEntity=
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptLoginIdentityProvidersWithMultipleElementsPerLine" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.067">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property><property name="TLS - Keystore"></property><property name="TLS - Keystore Password" encryption="">thisIsABadPassword</property><property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">s0Za4oQvjbJfeLEA||OLFH17SttrQ/7eMzN2++A10hwLWhV2S1zWVu4Z3Tu4suKA</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="aes/gcm/256">LBij4f/c2zppz9ej||o16d6ndYerE/fQIPH76p6vmdlwXXIsARw50ltYgLZmFCdA</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">FrRx93I42Gx4QIMT||vCIVtUM2oSdR7/tMIoJox3HSDTiIMfZSpu6I9bZFy951Cg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">s0Za4oQvjbJfeLEA||OLFH17SttrQ/7eMzN2++A10hwLWhV2S1zWVu4Z3Tu4suKA</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="aes/gcm/256">LBij4f/c2zppz9ej||o16d6ndYerE/fQIPH76p6vmdlwXXIsARw50ltYgLZmFCdA</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">FrRx93I42Gx4QIMT||vCIVtUM2oSdR7/tMIoJox3HSDTiIMfZSpu6I9bZFy951Cg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: s0Za4oQvjbJfeLEA||OLFH17SttrQ/7eMzN2++A10hwLWhV2S1zWVu4Z3Tu4suKA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: LBij4f/c2zppz9ej||o16d6ndYerE/fQIPH76p6vmdlwXXIsARw50ltYgLZmFCdA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: FrRx93I42Gx4QIMT||vCIVtUM2oSdR7/tMIoJox3HSDTiIMfZSpu6I9bZFy951Cg
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptLoginIdentityProviders" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.047">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">w/KMQ6CODIAi3nmf||HRlYriYpLVKKr59R9DyeHh3o1KRsfvkERxT+plq8gvZjlg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Da8hW9HiUd8CegHB||p8CPUVhLL7WQu8ks3WmkyAMH8kUM1X6rxlCs5SYvGg9dOA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">FGUmLhYiP2VOFHPW||6vxxsd6FzqeUo1R2EgzlGMnMtASbfYJFEwHTDOzHh/ncsQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">w/KMQ6CODIAi3nmf||HRlYriYpLVKKr59R9DyeHh3o1KRsfvkERxT+plq8gvZjlg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Da8hW9HiUd8CegHB||p8CPUVhLL7WQu8ks3WmkyAMH8kUM1X6rxlCs5SYvGg9dOA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">FGUmLhYiP2VOFHPW||6vxxsd6FzqeUo1R2EgzlGMnMtASbfYJFEwHTDOzHh/ncsQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: w/KMQ6CODIAi3nmf||HRlYriYpLVKKr59R9DyeHh3o1KRsfvkERxT+plq8gvZjlg
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: Da8hW9HiUd8CegHB||p8CPUVhLL7WQu8ks3WmkyAMH8kUM1X6rxlCs5SYvGg9dOA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: FGUmLhYiP2VOFHPW||6vxxsd6FzqeUo1R2EgzlGMnMtASbfYJFEwHTDOzHh/ncsQ
]]></system-err>
  </testcase>
  <testcase name="testShouldReadPasswordFromConsole" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.018">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read password: [0123 4567]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read password: [   thisIsABadPassword   ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read password: [non-hex-chars]
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperation" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.057">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	2+jMVFYmlPJIyZpP||yCeMxUjZ14KIyJRObeI3cqvSsl16QJiZlRBwcE763Pxy6MeVSw
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	FQ/cVjq1JGqzd2mc||4tCzDR5tPGjNaWJKMNfgdvQsbOK2DejQgLFxuwm4daluw0A/cMDNkLh2
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	6dzKOuinQCADsrPS||s0vfWjLMvTUy5GOlCb0/Jf5h4STHB/Gmqyz1P7OqWPzApCHK2P9Kr84rHZrTtg
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=6dzKOuinQCADsrPS||s0vfWjLMvTUy5GOlCb0/Jf5h4STHB/Gmqyz1P7OqWPzApCHK2P9Kr84rHZrTtg
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=FQ/cVjq1JGqzd2mc||4tCzDR5tPGjNaWJKMNfgdvQsbOK2DejQgLFxuwm4daluw0A/cMDNkLh2
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=2+jMVFYmlPJIyZpP||yCeMxUjZ14KIyJRObeI3cqvSsl16QJiZlRBwcE763Pxy6MeVSw
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testEncryptAuthorizersShouldHandleCommentedElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.061">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No unencrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testHandleFlowXmlMigrationWithIncorrectExistingPasswordShouldProvideHelpfulErrorMessage" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.027">
    <system-out><![CDATA[Encountered an error migrating flow content

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Encountered an error: null
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Exception: 
java.lang.NullPointerException
	at java.nio.file.Paths.get(Paths.java:132)
	at java_nio_file_Paths$get.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.call(StaticMetaMethodSite.java:94)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionTool.getTemporaryFlowXmlFile(ConfigEncryptionTool.groovy:755)
	at org.apache.nifi.properties.ConfigEncryptionTool.migrateFlowXmlContent(ConfigEncryptionTool.groovy:721)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:63)
	at org.apache.nifi.properties.ConfigEncryptionTool.handleFlowXml(ConfigEncryptionTool.groovy:1525)
	at org.apache.nifi.properties.ConfigEncryptionTool.handleFlowXml(ConfigEncryptionTool.groovy)
	at org.apache.nifi.properties.ConfigEncryptionTool$handleFlowXml$10.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:119)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testHandleFlowXmlMigrationWithIncorrectExistingPasswordShouldProvideHelpfulErrorMessage_closure170.doCall(ConfigEncryptionToolTest.groovy:4244)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testHandleFlowXmlMigrationWithIncorrectExistingPasswordShouldProvideHelpfulErrorMessage_closure170.doCall(ConfigEncryptionToolTest.groovy)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:399)
	at groovy.test.GroovyAssert.shouldFail(GroovyAssert.java:118)
	at groovy.util.GroovyTestCase.shouldFail(GroovyTestCase.java:216)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:156)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176)
	at org.apache.nifi.properties.ConfigEncryptionToolTest.testHandleFlowXmlMigrationWithIncorrectExistingPasswordShouldProvideHelpfulErrorMessage(ConfigEncryptionToolTest.groovy:4243)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Encountered an error migrating flow content
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptAuthorizersWithMultipleElementsPerLine" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.073">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property><property name="TLS - Keystore"></property><property name="TLS - Keystore Password" encryption="">thisIsABadPassword</property><property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">BjOkgvOifO3URMjE||9YMEyEYvqggS5KWMeLkT/9U/xvRrlOjcWtebMHydnBScpQ</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="aes/gcm/256">gZoMIdhOIO1x+WkP||6QqwFWfBXVmoO8pFh57vtjkyRkyC6lPM1eDGAld7ucD2ZA</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">bWBbxQyoYPT6/bUt||jWADIS6VQ1+fMUwtwo2xAclrOjma/T4E3r55CbuWczIyhg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">BjOkgvOifO3URMjE||9YMEyEYvqggS5KWMeLkT/9U/xvRrlOjcWtebMHydnBScpQ</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="aes/gcm/256">gZoMIdhOIO1x+WkP||6QqwFWfBXVmoO8pFh57vtjkyRkyC6lPM1eDGAld7ucD2ZA</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">bWBbxQyoYPT6/bUt||jWADIS6VQ1+fMUwtwo2xAclrOjma/T4E3r55CbuWczIyhg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: BjOkgvOifO3URMjE||9YMEyEYvqggS5KWMeLkT/9U/xvRrlOjcWtebMHydnBScpQ
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: gZoMIdhOIO1x+WkP||6QqwFWfBXVmoO8pFh57vtjkyRkyC6lPM1eDGAld7ucD2ZA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: bWBbxQyoYPT6/bUt||jWADIS6VQ1+fMUwtwo2xAclrOjma/T4E3r55CbuWczIyhg
]]></system-err>
  </testcase>
  <testcase name="testSerializeAuthorizersAndPreserveFormatShouldHandleCommentedFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.096">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No unencrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - No provider element with class org.apache.nifi.ldap.tenants.LdapUserGroupProvider found in XML content; the file could be empty or the element may be missing or commented out
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testShouldDetectActionFlags" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.063">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h -v --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help -v --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --verbose --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --verbose --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-h --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--help --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '-v --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '--verbose --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking ' --translateCli' with acceptable args: [translateCli]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking ' --migrate' with acceptable args: [translateCli]
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking '' with acceptable args: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Clean run has action flags: false | Expected: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking ' --translateCli' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: c translateCli  :: Translates the nifi.properties file to a format suitable for the NiFi CLI tool :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Allowed run has action flags: true | Expected: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Checking ' --migrate' with acceptable args: []
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - In this mode, the following options are invalid: [[ option: m migrate  :: If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted with the new scheme :: class java.lang.String ]]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Unallowed run has action flags: true | Expected: true
]]></system-err>
  </testcase>
  <testcase name="testDecryptAuthorizersShouldHandleCommentedElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.061">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <!-- To enable the ldap-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>
    To enable the ldap-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testParseShouldIgnoreMigrationKeyAndPasswordIfMigrationNotEnabled" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.02">
    <system-out><![CDATA['-w'/'--oldPassword' and '-e'/'--oldKey' are ignored unless '-m'/'--migrate' is enabled

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
'-w'/'--oldPassword' and '-e'/'--oldKey' are ignored unless '-m'/'--migrate' is enabled

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [any/path] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] '-w'/'--oldPassword' and '-e'/'--oldKey' are ignored unless '-m'/'--migrate' is enabled
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [any/path] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] '-w'/'--oldPassword' and '-e'/'--oldKey' are ignored unless '-m'/'--migrate' is enabled
]]></system-err>
  </testcase>
  <testcase name="testShouldNotLoadMissingNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.009">
    <system-out><![CDATA[Cannot load NiFiProperties from [src/test/resources/non_existent_nifi.properties]

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/non_existent_nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed nifi.properties location: src/test/resources/non_existent_nifi.properties
]]></system-err>
  </testcase>
  <testcase name="testWriteNiFiPropertiesShouldHandleWriteFailureWhenFileDoesNotExist" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Set POSIX permissions to [OTHERS_READ, OWNER_READ, GROUP_READ]
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The nifi.properties file at target/tmp/tmp_nifi.properties must be writable by the user running this tool
]]></system-err>
  </testcase>
  <testcase name="testParseShouldWarnIfLoginIdentityProvidersWillBeOverwritten" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source login-identity-providers.xml and destination login-identity-providers.xml are identical [conf/login-identity-providers.xml] so the original will be overwritten
]]></system-err>
  </testcase>
  <testcase name="testShouldTranslateCliWithPlaintextInput" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.03">
    <system-out><![CDATA[baseUrl=https://nifi.nifi.apache.org:8443
keystore=/path/to/keystore.jks
keystoreType=JKS
keystorePasswd=thisIsABadKeystorePassword
keyPasswd=thisIsABadKeyPassword
truststore=
truststoreType=
truststorePasswd=
proxiedEntity=
Tried to exit with status 0.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi_with_sensitive_properties_unprotected.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - No encryption key present in the bootstrap.conf file at target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No root key detected in target/tmp/tmp_bootstrap.conf -- if src/test/resources/nifi_with_sensitive_properties_unprotected.properties is encrypted, the translation will fail
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - STDOUT:
	baseUrl=https://nifi.nifi.apache.org:8443
	keystore=/path/to/keystore.jks
	keystoreType=JKS
	keystorePasswd=thisIsABadKeystorePassword
	keyPasswd=thisIsABadKeyPassword
	truststore=
	truststoreType=
	truststorePasswd=
	proxiedEntity=
]]></system-err>
  </testcase>
  <testcase name="testUpdateBootstrapContentsWithKeyShouldOverwriteExistingKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated bootstrap.conf lines: [# Root key in hexadecimal format for encrypted sensitive configuration values, nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
]]></system-err>
  </testcase>
  <testcase name="testUpdateBootstrapContentsWithKeyShouldAddLines" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.009">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated bootstrap.conf lines: [
, # Root key in hexadecimal format for encrypted sensitive configuration values, nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
]]></system-err>
  </testcase>
  <testcase name="testFirstLineOfSerializedPropertiesShouldBeLocalizedDateTime" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.26">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 2 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Current time zone: Western European Time (Europe/Lisbon)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 CET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 SAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 SAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 SAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 EET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 CET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:55 HDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 PYT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:55 HDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 COT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 VET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 GFT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 ACT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 00:12:55 WGST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 ECT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 GYT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 BOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 PET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 23:12:55 PMDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 UYT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 23:12:55 FNT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 00:12:55 WGST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 SRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 ACT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 GMT-03:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 ACT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 CLT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 EGST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:42:55 NDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 AWST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 DAVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 DDUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 MAWT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 NZST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 CLT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ROTT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 NZST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 SYOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 VOST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 ALMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 ANAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 AQTT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 AQTT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 TMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 TMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 GMT+05:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 AZT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 GMT+07:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 KGT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 BNT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:42:55 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 YAKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CHOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:42:55 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 BDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 BDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 TLT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 TJT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 GMT+03:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 HKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 HOVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 IRKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 TRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 WIB 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 WIT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 IDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:42:55 AFT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 PETT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 PKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 XJT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:57:55 NPT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:57:55 NPT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 YAKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:42:55 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 KRAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 MYT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 MYT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 MAGT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 WITA 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 PST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 KRAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 NOVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 OMST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 ORAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 WIB 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 KST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 QOST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 QYZT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:42:55 MMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 SAKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 UZT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 KST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 SGT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 SRET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 UZT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:42:55 IRST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 IDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 BTT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 BTT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 JST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 GMT+07:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 WITA 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 ULAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 ULAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 XJT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 VLAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 VLAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 YAKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:42:55 MMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 YEKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 AZOST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 00:12:55 CVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 23:12:55 GST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 FKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:57:55 ACWST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:42:55 LHST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:42:55 LHST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 AWST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 AWST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:55 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 ACT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 23:12:55 FNT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:42:55 NDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 CLT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 EAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 00:12:55 GMT-01:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 GMT-10:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:55 GMT-11:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 13:12:55 GMT-12:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 23:12:55 GMT-02:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 GMT-03:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 GMT-04:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 GMT-05:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 GMT-06:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 GMT-07:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 GMT-08:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:55 GMT-09:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 GMT+01:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 GMT+10:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 GMT+11:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 GMT+12:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 GMT+13:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 15:12:55 GMT+14:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 GMT+02:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 GMT+03:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GMT+04:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 GMT+05:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 GMT+06:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 GMT+07:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 GMT+08:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 GMT+09:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GMT+04:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 TRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 EET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 GMT+03:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 MSK 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 MSK 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 SAMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GMT+04:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 MSK 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 GMT+04:00 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 MSK 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 HKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:55 GMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:55 IOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:55 CXT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:42:55 CCT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 TFT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 SCT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:55 MVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 MUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:55 RET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:42:55 IRST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:55 IDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 JST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 MHT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 EET 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 MEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 NZST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:57:55 CHAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 WSST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 NZST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 BST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:57:55 CHAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 CHUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 EAST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 VUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 PHOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 TKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 FJT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 TVT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 GALT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:55 GAMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 SBT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 ChST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 HST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 HST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 PHOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 15:12:55 LINT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 KOST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 MHT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 MHT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:42:55 MART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:55 SST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 NRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:55 NUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 NFT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 NCT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:55 SST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 PWT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:55 PST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 PONT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:55 PONT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 PGT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 CKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 ChST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:55 SST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 TAHT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 GILT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:55 TOT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 CHUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 WAKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:55 WFT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:55 CHUT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:55 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:55 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:55 KST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:55 SGT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:55 ADT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:55 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:55 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:55 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:55 HST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:55 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:56 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:56 PST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:56 AKST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:56 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:56 TRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:56 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:56 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 16:12:56 HDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:56 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:56 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:56 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:56 HST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:56 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:56 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 19:12:56 MDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 14:12:56 SST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:56 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:56 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:56 MSK 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 02:12:56 WEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 01:12:56 UTC 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:56 EST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 15:12:56 HST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:42:56 ACST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 11:12:56 AEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:56 ART 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:56 EEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 17:12:56 AKDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:12:56 BRT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 07:12:56 BDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:56 CAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 22:42:56 NDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 20:12:56 CDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 09:12:56 CST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 04:12:56 EAT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 03:12:56 CEST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:56 EDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:42:56 IST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 10:12:56 JST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 14:12:56 WSST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 05:12:56 AMT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 13:12:56 NZST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 06:12:56 PKT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 MST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 21:12:56 AST 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Wed May 01 18:12:56 PDT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 12:12:56 SBT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First line date: #Thu May 02 08:12:56 ICT 2024
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reset current time zone to Western European Time (Europe/Lisbon)
]]></system-err>
  </testcase>
  <testcase name="testShouldParseOutputNiFiPropertiesArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output nifi.properties location: src/test/resources/nifi.properties
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output nifi.properties location: src/test/resources/nifi.properties
]]></system-err>
  </testcase>
  <testcase name="testShouldParseKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.009">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [   0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210   ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [xxx0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210zzz]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123-4567-0123-4567-0123-4567-0123-4567]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [01234567012345670123456701234567]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [89ab cdef 89ab cdef 89ab cdef 89ab cdef]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [89ABCDEF89ABCDEF89ABCDEF89ABCDEF]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123456789abcdeffedcba98765432100123456789abcdeffedcba9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123456789ABCDEFFEDCBA98765432100123456789ABCDEF]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key:  [0123456789ABCDEFFEDCBA98765432100123456789ABCDEF]
]]></system-err>
  </testcase>
  <testcase name="testWriteNiFiPropertiesShouldHandleWriteFailureWhenFileExists" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.006">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Set POSIX permissions to [OTHERS_READ, OWNER_READ, GROUP_READ]
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The nifi.properties file at target/tmp_nifi.properties must be writable by the user running this tool
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationOnAFlowXmlWithPreviouslyEncryptedNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.051">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 10 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:nififtw!, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original encrypted values: [nifi.security.keyPasswd:ttiSNTC7PUf2Hla7||W2OmVFn4bfB2ZJNBG55SaLneQeZahhF6GIaLZU+i4zRFfxKnlQ, nifi.security.keystorePasswd:vp9C9a8KbSYZFdUM||RoZHB1J+sRgCKG2vKBviOn71tdhsDYH42No+VmIaFMolrTMD/zmwcKev, nifi.security.truststorePasswd:, nifi.sensitive.props.key:UXcrW8T1UKAPJeun||ezUJSp30AvKGsRxJOOXoPUtZonv56Lx1, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key originally protected with aes/gcm/128
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# security properties #
nifi.sensitive.props.key=FKmsH8w81XvAxu9d||iXvaYgENBb1Nb7IsoJphKBDC91kLLnWpB+emzNlKyb1urQ
nifi.sensitive.props.key.protected=aes/gcm/128
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=vp9C9a8KbSYZFdUM||RoZHB1J+sRgCKG2vKBviOn71tdhsDYH42No+VmIaFMolrTMD/zmwcKev
nifi.security.keystorePasswd.protected=aes/gcm/128
nifi.security.keyPasswd=ttiSNTC7PUf2Hla7||W2OmVFn4bfB2ZJNBG55SaLneQeZahhF6GIaLZU+i4zRFfxKnlQ
nifi.security.keyPasswd.protected=aes/gcm/128
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrated flow cipher texts for: target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original target/tmp/tmp-flow.xml.gz unique cipher texts: [enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}, enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrated target/tmp/tmp-flow.xml.gz unique cipher texts: [enc{4a0b26bb5e8c5d1170e8f279db8170e094df638cbb723642b1b40a3a49db5347724bb56923353a7495a094e47148d373}, enc{d8a81e225129dae27780837051dc01d59fecf0e27a01a5669b59a5f5aac766b3d17aeca9dd4e6e78e2f1acf438c51599}]
]]></system-err>
  </testcase>
  <testcase name="testSerializeAuthorizersAndPreserveFormatShouldHandleRenamedProvider" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.112">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">wbpOpqk0meVifsmj||k1yjnWYVaKT8Kyx7MqoJT3NrBkwyEHb7ILSL3vM5JB1KIA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">uwJx5pW7BfbBpKI0||//5nEbZBRq4HDHd62RUKxWU88TtTYkZUNlXeockTvpbuqA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0VwSHJPl5ubZ0onx||PwKVcWHTd2XgatVeQoZmiwy1JD9W1CIxaMmkLLRN+Cfomg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">wbpOpqk0meVifsmj||k1yjnWYVaKT8Kyx7MqoJT3NrBkwyEHb7ILSL3vM5JB1KIA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">uwJx5pW7BfbBpKI0||//5nEbZBRq4HDHd62RUKxWU88TtTYkZUNlXeockTvpbuqA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0VwSHJPl5ubZ0onx||PwKVcWHTd2XgatVeQoZmiwy1JD9W1CIxaMmkLLRN+Cfomg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">wbpOpqk0meVifsmj||k1yjnWYVaKT8Kyx7MqoJT3NrBkwyEHb7ILSL3vM5JB1KIA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">uwJx5pW7BfbBpKI0||//5nEbZBRq4HDHd62RUKxWU88TtTYkZUNlXeockTvpbuqA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">0VwSHJPl5ubZ0onx||PwKVcWHTd2XgatVeQoZmiwy1JD9W1CIxaMmkLLRN+Cfomg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testSerializeAuthorizersAndPreserveFormatShouldHandleEmptyFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.015">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 

[Fatal Error] :1:1: Premature end of file.
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - No provider element with class org.apache.nifi.ldap.tenants.LdapUserGroupProvider found in XML content; the file could be empty or the element may be missing or commented out
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 

]]></system-err>
  </testcase>
  <testcase name="testSerializeAuthorizersAndPreserveFormatShouldRespectComments" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.101">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">nemVnYu4H7xA3hAM||LbizYcbTF+WJV3FUzdsRGAI7nfMshsZbxlufoT9+IEkDAA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">NUjYlcabU/iK/Rqf||7x8xOvDS4Y1odk5EOrvAy46WwR52gg3BkY+/w5oOgx45eQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">9OHZOYTdxht0qXlt||dA9xvNyyeP/1rDAbKUQPUz0KVscnYsGcO3W9hJXLRlt/bw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">nemVnYu4H7xA3hAM||LbizYcbTF+WJV3FUzdsRGAI7nfMshsZbxlufoT9+IEkDAA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">NUjYlcabU/iK/Rqf||7x8xOvDS4Y1odk5EOrvAy46WwR52gg3BkY+/w5oOgx45eQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">9OHZOYTdxht0qXlt||dA9xvNyyeP/1rDAbKUQPUz0KVscnYsGcO3W9hJXLRlt/bw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">nemVnYu4H7xA3hAM||LbizYcbTF+WJV3FUzdsRGAI7nfMshsZbxlufoT9+IEkDAA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">NUjYlcabU/iK/Rqf||7x8xOvDS4Y1odk5EOrvAy46WwR52gg3BkY+/w5oOgx45eQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">9OHZOYTdxht0qXlt||dA9xvNyyeP/1rDAbKUQPUz0KVscnYsGcO3W9hJXLRlt/bw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testShouldTranslateCli" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.006">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded NiFiProperties from src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Translated to CLI format: 
baseUrl=https://nifi.nifi.apache.org:8443
keystore=/path/to/keystore.jks
keystoreType=JKS
keystorePasswd=thisIsABadKeystorePassword
keyPasswd=thisIsABadKeyPassword
truststore=
truststoreType=
truststorePasswd=
proxiedEntity=
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptAuthorizersWithMultilineElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.069">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption=
                "aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property
                name="TLS - Keystore Password"
                encryption="aes/gcm/128">
            Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g
        </property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt 
            Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g
         using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testParseShouldIgnoreFilesIfOverrideFlagPresent" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [conf/nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [conf/flow.xml.gz] so the original will be overwritten
]]></system-err>
  </testcase>
  <testcase name="testShouldActuallyDeriveKeyFromPassword" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.228">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Derived key:  [2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE]
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationForNiFiPropertiesAndLoginIdentityProvidersAndAuthorizers" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.181">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original LIP XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original Authorizers XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: src/test/resources/login-identity-providers-populated.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: target/tmp/tmp-lip.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              src/test/resources/authorizers-populated.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              target/tmp/tmp-authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded login identity providers content (105 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">IWYQd84usuHRlf0s||OLQ58B9kwla8Su1ZvJgkU4GQmK2XC6vU5CCvPgDxNlO7nA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">o4Ngu4KMo5YP94wQ||VH+v77EjjOi38jQ2FNrVmdKKL9iIJrU2t3B2xaasuBbXOw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">7EXpIu9SA7MC0wG9||s0iY64D2o20yAt+zveeTxjPaAcgshrV3hThiJGkhaaN91A</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded authorizers content (309 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">yAup3ZgvfRUr5K1h||xaoHJJgqEUuRNSoEZaxn1xdCzs3kTskGbEQr/2zl/vgIOw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">nyDGj7xoclKT9c7I||GGXkzElZ62LSp2mug/GvUpvi4LNHxRRWjjYwbcPm0VN5hg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">fGO1pwqUscdyidve||rVuckrviFLlYRBvA/vw1OgCAOTyzwck+dnzzpWwwLcqpnw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	ckQk+FtZYm2UklwL||WYzDv1f3IIEA/BdMp/tZaAmnGlsODr6yWKY8tZYpORoTpvGKmQ
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	XdFShSc9mhf4yG+d||SDw1M81pdWEhkVVuHT2k8mshtnFUZKcJiyd1Rf4fDwaAdQ8A8Cjv2VR9
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	ArPwZbQQ0/zoz7qu||1Q3zRuxC6cnZjALRHqPUHgVO6rdjICglTyeSvdbf9Dh59Rj7wDBPAmQoPoSrhQ
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=ArPwZbQQ0/zoz7qu||1Q3zRuxC6cnZjALRHqPUHgVO6rdjICglTyeSvdbf9Dh59Rj7wDBPAmQoPoSrhQ
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=XdFShSc9mhf4yG+d||SDw1M81pdWEhkVVuHT2k8mshtnFUZKcJiyd1Rf4fDwaAdQ8A8Cjv2VR9
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=ckQk+FtZYm2UklwL||WYzDv1f3IIEA/BdMp/tZaAmnGlsODr6yWKY8tZYpORoTpvGKmQ
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated LIP XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">IWYQd84usuHRlf0s||OLQ58B9kwla8Su1ZvJgkU4GQmK2XC6vU5CCvPgDxNlO7nA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">o4Ngu4KMo5YP94wQ||VH+v77EjjOi38jQ2FNrVmdKKL9iIJrU2t3B2xaasuBbXOw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">7EXpIu9SA7MC0wG9||s0iY64D2o20yAt+zveeTxjPaAcgshrV3hThiJGkhaaN91A</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated Authorizers XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">yAup3ZgvfRUr5K1h||xaoHJJgqEUuRNSoEZaxn1xdCzs3kTskGbEQr/2zl/vgIOw</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">nyDGj7xoclKT9c7I||GGXkzElZ62LSp2mug/GvUpvi4LNHxRRWjjYwbcPm0VN5hg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">fGO1pwqUscdyidve||rVuckrviFLlYRBvA/vw1OgCAOTyzwck+dnzzpWwwLcqpnw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldLoadFlowXmlContent" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.042">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read flow.xml: 
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<flowController encoding-version="1.0">
    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
    <maxEventDrivenThreadCount>5</maxEventDrivenThreadCount>
    <rootGroup>
        <id>fcf146b2-0157-1000-7850-7adf1d31e3fa</id>
        <name>NiFi Flow</name>
        <position x="0.0" y="0.0"/>
        <comment/>
        <processGroup>
            <id>8a61ec1d-0158-1000-3a1a-12c54fe77838</id>
            <name>EncryptedProperties Example</name>
            <position x="1119.0" y="295.0"/>
            <comment/>
            <processor>
                <id>8a621f0b-0158-1000-b5c2-92a09a124501</id>
                <name>Encrypt</name>
                <position x="626.0" y="237.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Encrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <processor>
                <id>8a6314ee-0158-1000-6dd0-60f153db26c1</id>
                <name>Decrypt</name>
                <position x="630.0" y="482.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Decrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <connection>
                <id>8a636069-0158-1000-50ff-244f2a8eeb7a</id>
                <name/>
                <bendPoints/>
                <labelIndex>1</labelIndex>
                <zIndex>0</zIndex>
                <sourceId>8a621f0b-0158-1000-b5c2-92a09a124501</sourceId>
                <sourceGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</sourceGroupId>
                <sourceType>PROCESSOR</sourceType>
                <destinationId>8a6314ee-0158-1000-6dd0-60f153db26c1</destinationId>
                <destinationGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</destinationGroupId>
                <destinationType>PROCESSOR</destinationType>
                <relationship>success</relationship>
                <maxWorkQueueSize>10000</maxWorkQueueSize>
                <maxWorkQueueDataSize>1 GB</maxWorkQueueDataSize>
                <flowFileExpiration>0 sec</flowFileExpiration>
            </connection>
        </processGroup>
    </rootGroup>
    <controllerServices/>
    <reportingTasks/>
</flowController>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded flow.xml.gz: 
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<flowController encoding-version="1.0">
    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
    <maxEventDrivenThreadCount>5</maxEventDrivenThreadCount>
    <rootGroup>
        <id>fcf146b2-0157-1000-7850-7adf1d31e3fa</id>
        <name>NiFi Flow</name>
        <position x="0.0" y="0.0"/>
        <comment/>
        <processGroup>
            <id>8a61ec1d-0158-1000-3a1a-12c54fe77838</id>
            <name>EncryptedProperties Example</name>
            <position x="1119.0" y="295.0"/>
            <comment/>
            <processor>
                <id>8a621f0b-0158-1000-b5c2-92a09a124501</id>
                <name>Encrypt</name>
                <position x="626.0" y="237.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Encrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <processor>
                <id>8a6314ee-0158-1000-6dd0-60f153db26c1</id>
                <name>Decrypt</name>
                <position x="630.0" y="482.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Decrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <connection>
                <id>8a636069-0158-1000-50ff-244f2a8eeb7a</id>
                <name/>
                <bendPoints/>
                <labelIndex>1</labelIndex>
                <zIndex>0</zIndex>
                <sourceId>8a621f0b-0158-1000-b5c2-92a09a124501</sourceId>
                <sourceGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</sourceGroupId>
                <sourceType>PROCESSOR</sourceType>
                <destinationId>8a6314ee-0158-1000-6dd0-60f153db26c1</destinationId>
                <destinationGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</destinationGroupId>
                <destinationType>PROCESSOR</destinationType>
                <relationship>success</relationship>
                <maxWorkQueueSize>10000</maxWorkQueueSize>
                <maxWorkQueueDataSize>1 GB</maxWorkQueueDataSize>
                <flowFileExpiration>0 sec</flowFileExpiration>
            </connection>
        </processGroup>
    </rootGroup>
    <controllerServices/>
    <reportingTasks/>
</flowController>

]]></system-err>
  </testcase>
  <testcase name="testSerializeAuthorizersAndPreserveFormatShouldHandleComplexProperty" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.204">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testTranslateCliWithEncryptedInputShouldNotIntersperseVerboseOutput" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.055">
    <system-out><![CDATA[baseUrl=https://nifi.nifi.apache.org:8443
keystore=/path/to/keystore.jks
keystoreType=JKS
keystorePasswd=thisIsABadKeystorePassword
keyPasswd=thisIsABadKeyPassword
truststore=
truststoreType=
truststorePasswd=
proxiedEntity=
Tried to exit with status 0.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi_with_sensitive_properties_protected_aes.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Encountered an error
org.junit.contrib.java.lang.system.internal.CheckExitCalled: Tried to exit with status 0.
	at org.junit.contrib.java.lang.system.internal.NoExitSecurityManager.checkExit(NoExitSecurityManager.java:24)
	at java.lang.Runtime.exit(Runtime.java:101)
	at java.lang.System.exit(System.java:987)
	at java_lang_System$exit$1.call(Unknown Source)
	at org.apache.nifi.properties.ConfigEncryptionTool.main(ConfigEncryptionTool.groovy:1374)
	at org.apache.nifi.properties.ConfigEncryptionTool$main.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest.testTranslateCliWithEncryptedInputShouldNotIntersperseVerboseOutput(ConfigEncryptionToolTest.groovy:4624)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - STDOUT:
	baseUrl=https://nifi.nifi.apache.org:8443
	keystore=/path/to/keystore.jks
	keystoreType=JKS
	keystorePasswd=thisIsABadKeystorePassword
	keyPasswd=thisIsABadKeyPassword
	truststore=
	truststoreType=
	truststorePasswd=
	proxiedEntity=
]]></system-err>
  </testcase>
  <testcase name="testShouldHandleKeyAndPasswordFlag" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.008">
    <system-out><![CDATA[Only one of '-p'/'--password' and '-k'/'--key' can be used

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using args: [-k, 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210, -p, thisIsABadPassword, -n, ]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Only one of '-p'/'--password' and '-k'/'--key' can be used
]]></system-err>
  </testcase>
  <testcase name="testTranslateCliShouldFailIfMissingNecessaryFlags" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.01">
    <system-out><![CDATA[When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-b, bootstrap.conf, -c]
]]></system-err>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldHandleCommentedFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.028">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No unencrypted password property elements found in login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - No provider element with class org.apache.nifi.ldap.LdapProvider found in XML content; the file could be empty or the element may be missing or commented out
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testParseShouldWarnIfNiFiPropertiesWillBeOverwritten" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [conf/nifi.properties] so the original will be overwritten
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFlowXmlContent" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read flow.xml as input stream.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Found 2 unique encrypted properties in the original flow.xml content
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrated flow.xml.
]]></system-err>
  </testcase>
  <testcase name="testShouldIgnoreRawKeyFlagIfPasswordProvided" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - If the key or password is provided in the arguments, '-r'/'--useRawKey' is ignored
]]></system-err>
  </testcase>
  <testcase name="testMigrateFlowXmlContentShouldUseConstantSalt" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.016">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read flow.xml: 
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<flowController encoding-version="1.0">
    <maxTimerDrivenThreadCount>10</maxTimerDrivenThreadCount>
    <maxEventDrivenThreadCount>5</maxEventDrivenThreadCount>
    <rootGroup>
        <id>fcf146b2-0157-1000-7850-7adf1d31e3fa</id>
        <name>NiFi Flow</name>
        <position x="0.0" y="0.0"/>
        <comment/>
        <processGroup>
            <id>8a61ec1d-0158-1000-3a1a-12c54fe77838</id>
            <name>EncryptedProperties Example</name>
            <position x="1119.0" y="295.0"/>
            <comment/>
            <processor>
                <id>8a621f0b-0158-1000-b5c2-92a09a124501</id>
                <name>Encrypt</name>
                <position x="626.0" y="237.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Encrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <processor>
                <id>8a6314ee-0158-1000-6dd0-60f153db26c1</id>
                <name>Decrypt</name>
                <position x="630.0" y="482.0"/>
                <styles/>
                <comment/>
                <class>org.apache.nifi.processors.standard.EncryptContent</class>
                <maxConcurrentTasks>1</maxConcurrentTasks>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <penalizationPeriod>30 sec</penalizationPeriod>
                <yieldPeriod>1 sec</yieldPeriod>
                <bulletinLevel>WARN</bulletinLevel>
                <lossTolerant>false</lossTolerant>
                <scheduledState>STOPPED</scheduledState>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <runDurationNanos>0</runDurationNanos>
                <property>
                    <name>Mode</name>
                    <value>Decrypt</value>
                </property>
                <property>
                    <name>key-derivation-function</name>
                    <value>NIFI_LEGACY</value>
                </property>
                <property>
                    <name>Encryption Algorithm</name>
                    <value>MD5_128AES</value>
                </property>
                <property>
                    <name>allow-weak-crypto</name>
                    <value>not-allowed</value>
                </property>
                <property>
                    <name>Password</name>
                    <value>enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}</value>
                </property>
                <property>
                    <name>raw-key-hex</name>
                </property>
                <property>
                    <name>public-keyring-file</name>
                </property>
                <property>
                    <name>public-key-user-id</name>
                </property>
                <property>
                    <name>private-keyring-file</name>
                </property>
                <property>
                    <name>private-keyring-passphrase</name>
                </property>
            </processor>
            <connection>
                <id>8a636069-0158-1000-50ff-244f2a8eeb7a</id>
                <name/>
                <bendPoints/>
                <labelIndex>1</labelIndex>
                <zIndex>0</zIndex>
                <sourceId>8a621f0b-0158-1000-b5c2-92a09a124501</sourceId>
                <sourceGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</sourceGroupId>
                <sourceType>PROCESSOR</sourceType>
                <destinationId>8a6314ee-0158-1000-6dd0-60f153db26c1</destinationId>
                <destinationGroupId>8a61ec1d-0158-1000-3a1a-12c54fe77838</destinationGroupId>
                <destinationType>PROCESSOR</destinationType>
                <relationship>success</relationship>
                <maxWorkQueueSize>10000</maxWorkQueueSize>
                <maxWorkQueueDataSize>1 GB</maxWorkQueueDataSize>
                <flowFileExpiration>0 sec</flowFileExpiration>
            </connection>
        </processGroup>
    </rootGroup>
    <controllerServices/>
    <reportingTasks/>
</flowController>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Found 2 encrypted properties in the original flow.xml content
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrated flow.xml.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - First detected salt: d7aa4628572642097cfc55fffe9c9383
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptAuthorizers" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.051">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testShouldParseAuthorizersArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source authorizers.xml and destination authorizers.xml are identical [src/test/resources/authorizers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed authorizers.xml location: src/test/resources/authorizers.xml
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source authorizers.xml and destination authorizers.xml are identical [src/test/resources/authorizers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed authorizers.xml location: src/test/resources/authorizers.xml
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptLoginIdentityProviders" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.118">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationOnFlowXmlMultipleTimes" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.136">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 10 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:nififtw!, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original encrypted values: [nifi.security.keyPasswd:ttiSNTC7PUf2Hla7||W2OmVFn4bfB2ZJNBG55SaLneQeZahhF6GIaLZU+i4zRFfxKnlQ, nifi.security.keystorePasswd:vp9C9a8KbSYZFdUM||RoZHB1J+sRgCKG2vKBviOn71tdhsDYH42No+VmIaFMolrTMD/zmwcKev, nifi.security.truststorePasswd:, nifi.sensitive.props.key:UXcrW8T1UKAPJeun||ezUJSp30AvKGsRxJOOXoPUtZonv56Lx1, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key originally protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from nififtw! to thisIsABadPassword0
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword0
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=3EilW9yAdREfRJ9G||9WlIJz3nRL1gi7lvjZheTeqGLFikGrYa0yI+Q/dzAv3vIak
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}, enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{ef0831ed78d9917cef31c68a2a8992a779dfbe153291613e94e7dcdd09b87a347319629e50b4092e27c8af46bb01c7b7}, enc{e8c101c50a1d0a263539a12d5f1a858113d7f2fbbe601d187afcabbecffa093ee163bb31ac3a9db7a4fbdbf9e48d0734}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword0 to thisIsABadPassword1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword1
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=5geTNKsrB2mNiBLv||2Mq19PSGFvgrVnkV4U6YXp4VkqwNKXuE2NpEdzwIhUGopEg
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{ef0831ed78d9917cef31c68a2a8992a779dfbe153291613e94e7dcdd09b87a347319629e50b4092e27c8af46bb01c7b7}, enc{e8c101c50a1d0a263539a12d5f1a858113d7f2fbbe601d187afcabbecffa093ee163bb31ac3a9db7a4fbdbf9e48d0734}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{25ee4c23a724bf36ee2ee1723e29ec889df114db156da2f4c57e68f3ba6a783804770bd111bb29c5fd453c17ad4139ba}, enc{c00396fe58bda86dcc791975f1a065d478d9f85c89ae093551110cfadbe67477066f723a094755fafaaab173b25a5d37}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword1 to thisIsABadPassword2
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword2
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=wF2SaVSgkHuf8uQ8||k4p5xGi5mbyldQ0gNhoBgpvgO1E/tKozPq/8EkQYQtb0zvQ
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{25ee4c23a724bf36ee2ee1723e29ec889df114db156da2f4c57e68f3ba6a783804770bd111bb29c5fd453c17ad4139ba}, enc{c00396fe58bda86dcc791975f1a065d478d9f85c89ae093551110cfadbe67477066f723a094755fafaaab173b25a5d37}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{4cd209964e6baa2ee1bfdc4a96cc31e911f8f1f6022435a5e8e9decc1f340ffe4dc8af353b22991932c6e9c2213a4a91}, enc{27f92f72af4a1908dec997e94470b1f23cb4a4c1cd8ff91721f87484c7c129e98e5f67582e292240a13d06f752b187d8}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword2 to thisIsABadPassword3
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword3
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=HQshAlTm2qaNNp1u||O90Cz3u8beFGVbvbJQx6O/qkAJ/SEfbfTtaL/zi/GG0Jx/0
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{4cd209964e6baa2ee1bfdc4a96cc31e911f8f1f6022435a5e8e9decc1f340ffe4dc8af353b22991932c6e9c2213a4a91}, enc{27f92f72af4a1908dec997e94470b1f23cb4a4c1cd8ff91721f87484c7c129e98e5f67582e292240a13d06f752b187d8}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{1f16b59eb558180e64e92e35e00db27a33c430e6d562060b7db9982b20fa0e45023c2d2e311488508143b40980e20b80}, enc{350740d4de09c5572cd3b33b77b2d2a5cde6aa2517ca7921c60510723e5cb77532eec323d251987daff0f942ad52721d}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword3 to thisIsABadPassword4
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword4
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=usTQVDlUNbQ3RH2Q||/HIOnuWc1kH2YyQiVRL20I7jtUwsYaX6IhRyqaEMIohg/Hw
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{1f16b59eb558180e64e92e35e00db27a33c430e6d562060b7db9982b20fa0e45023c2d2e311488508143b40980e20b80}, enc{350740d4de09c5572cd3b33b77b2d2a5cde6aa2517ca7921c60510723e5cb77532eec323d251987daff0f942ad52721d}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{c36ba15c471a38dd5111f986d2d60cf7efb2a3ea21669435fedd68984f870d3a4558a6144ccf08c6844121244a3084bc}, enc{d7f5c0911e61537bf59ee29b6ac10f4bc59cbd3acd1f01d1773315f9793ef423624bd02f10ccc49c58a1828868a886cd}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword4 to thisIsABadPassword5
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main with -n target/tmp/tmp-nifi.properties -f target/tmp/tmp-flow.xml.gz -b target/tmp/tmp_bootstrap.conf -x -v -s thisIsABadPassword5
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.sensitive.props.key=CIrJ6S68O/aR4SIH||yLVmrk4YSFnXVVP3pIeJC0iBTT+P3amSNcOP+2Jn4EL5mOc
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{c36ba15c471a38dd5111f986d2d60cf7efb2a3ea21669435fedd68984f870d3a4558a6144ccf08c6844121244a3084bc}, enc{d7f5c0911e61537bf59ee29b6ac10f4bc59cbd3acd1f01d1773315f9793ef423624bd02f10ccc49c58a1828868a886cd}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{ccde6b722ee0d5cc9342369f91715f6a96924c5e5cc70e5c92feb4a9cf44e3763ec5b082f7a4731cb7f7eaadd7bfcb87}, enc{f19543e9229ce1e7d985e113f58daab1ae5959b08139c4b7f7d43785478ec62e0b375f832fe5500e5bb81ff4da806969}]
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptAuthorizersWithEmptySensitiveElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.057">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">0VZ6ztRD9DsQYFMj||CkVAVc4WeUhZJ2r3fC1grSCtx9uOtNF0BXXrt7qpz4/f5A</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password"/>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password"/>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">0VZ6ztRD9DsQYFMj||CkVAVc4WeUhZJ2r3fC1grSCtx9uOtNF0BXXrt7qpz4/f5A</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password"/>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password"/>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: 0VZ6ztRD9DsQYFMj||CkVAVc4WeUhZJ2r3fC1grSCtx9uOtNF0BXXrt7qpz4/f5A
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptAuthorizersWithRenamedProvider" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.068">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">+CCg2fsL/ko/AP/K||0e4t/3m6bRSDbGD3fzTelM1nhUNueJVjpkBD15zm80ftFA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">3+/ND/8s10kbY4Le||0gm/OmFM1DJiQypToQKiAfYqWl6PNnZ1CZERDn1QWLvK2A</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">OThj2iNQC+NdYUds||yOwheEiJfZfReBO2OLgmSY+OOnegvQfz5oK4qyFBoa9yAw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>renamed-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">+CCg2fsL/ko/AP/K||0e4t/3m6bRSDbGD3fzTelM1nhUNueJVjpkBD15zm80ftFA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">3+/ND/8s10kbY4Le||0gm/OmFM1DJiQypToQKiAfYqWl6PNnZ1CZERDn1QWLvK2A</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">OThj2iNQC+NdYUds||yOwheEiJfZfReBO2OLgmSY+OOnegvQfz5oK4qyFBoa9yAw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">renamed-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: +CCg2fsL/ko/AP/K||0e4t/3m6bRSDbGD3fzTelM1nhUNueJVjpkBD15zm80ftFA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: 3+/ND/8s10kbY4Le||0gm/OmFM1DJiQypToQKiAfYqWl6PNnZ1CZERDn1QWLvK2A
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: OThj2iNQC+NdYUds||yOwheEiJfZfReBO2OLgmSY+OOnegvQfz5oK4qyFBoa9yAw
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptAuthorizersWithMultilineElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.063">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">
            thisIsABadPassword
        </property>

        <property name="TLS - Keystore"></property>
        <property
                name="TLS - Keystore Password">thisIsABadPassword
        </property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name=
                          "TLS - Truststore Password">
            thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">AlACmP9aiy9Wiu4O||vlj0AxymTPql6T5ZR1os0MeMVRP+CIiHBf5Ce53YM9jSfw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">O/x4ffTNBtzSr8NW||SZvyhZofLy/uwiX7fTai0sIzn9UnO8YLZyq5DFhmeEVSyg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">++FdvKlxPuzkzJuU||/Grr+hRN6FneDQ36g8QiU1i5p2x7cJqCa9kpoQMb0I1J4g</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">AlACmP9aiy9Wiu4O||vlj0AxymTPql6T5ZR1os0MeMVRP+CIiHBf5Ce53YM9jSfw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">O/x4ffTNBtzSr8NW||SZvyhZofLy/uwiX7fTai0sIzn9UnO8YLZyq5DFhmeEVSyg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">++FdvKlxPuzkzJuU||/Grr+hRN6FneDQ36g8QiU1i5p2x7cJqCa9kpoQMb0I1J4g</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: AlACmP9aiy9Wiu4O||vlj0AxymTPql6T5ZR1os0MeMVRP+CIiHBf5Ce53YM9jSfw
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: O/x4ffTNBtzSr8NW||SZvyhZofLy/uwiX7fTai0sIzn9UnO8YLZyq5DFhmeEVSyg
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: ++FdvKlxPuzkzJuU||/Grr+hRN6FneDQ36g8QiU1i5p2x7cJqCa9kpoQMb0I1J4g
]]></system-err>
  </testcase>
  <testcase name="testParseKeyShouldThrowExceptionForInvalidKeys" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.015">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123 4567]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The key (8 hex chars) must be of length [128, 192, 256] bits ([32, 48, 64] hex characters)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [non-hex-chars]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The key (3 hex chars) must be of length [128, 192, 256] bits ([32, 48, 64] hex characters)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA987654321]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The key (63 hex chars) must be of length [128, 192, 256] bits ([32, 48, 64] hex characters)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading key: [&ITD SF^FI&&%SDIF]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] The key (5 hex chars) must be of length [128, 192, 256] bits ([32, 48, 64] hex characters)
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFlowXmlContentMultipleTimes" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.026">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts: 
enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}
enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Found 2 encrypted properties in the original flow.xml content
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from nififtw! to thisIsABadPassword0
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 0: 
enc{8daef98b0ceb5c1f05efd5d67b11c4c2311c4df7bc23e54d5819d7ec3b496f17877d3e70fac162c57e6f20de2d912df3}
enc{345d90d55748f7836abe895d5746e2180a2d1b1076a8c30420576ca548b6246f333307942eadb0ca1be66f9e000c0df1}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword0 to thisIsABadPassword1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 1: 
enc{5d0bb02daeb307763357263c5dd7e27220afd53fc1c8d43dc6e88fa500615296fcfd59cd5fdd65d4bcec1bb4026b7e0f}
enc{a265080b4f8ec2adae0a8695ea29c0f922fa8ed0010d06465c09808f49cdd760e7ef62f8ad75e3d4292e10fff75a71b7}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword1 to thisIsABadPassword2
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 2: 
enc{fb4a957767e2ead3183a1d7cac0a05c3635b6631961d47c6fcabef98f339dd25585b4260f4966c4894f4c47c66794df4}
enc{9b18eb2eab6562438564e47a942208aa9247052b1882fe9cad95bf76bd771c243975d89f11d89d1d94c40945ad4cb43c}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword2 to thisIsABadPassword3
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 3: 
enc{055095920f1ec1a24c4824288c17fe47bbafa0065b7b683c585070c1c9e6e89f1562cbb1742ac7083caa20e4126e5faa}
enc{00fe6deb451ec835cc54fe3533559a13868f1ea9ef73cfd2a07e4583b2c2aecc94a705b7d8f832e38d9d78122145fc9c}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword3 to thisIsABadPassword4
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 4: 
enc{20a7cdf517dc64dbb20c4552e193cdc2dc1c9689ea4319aa445a51c2cc637d06104e847569aa066a76648641c4de1d18}
enc{c63ea6dc73e4b2911e378abe4af40ce89894bc190ee28376e319c5cc72c8414996c775046f20553723e3c5e301438a13}
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating from thisIsABadPassword4 to thisIsABadPassword5
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher texts for iteration 5: 
enc{24db85000f0a6e4b9fb569b88f2b71b1ec640e5a3ace7e5cfa790431cefb2f7673289ee228ed3e633bc519bcc6e96fac}
enc{d1e7655c69994eed096d9a8096574f35c41b06a9e8a82bc7f0dcb15c346181f6dbf21eaa8e6fdda663bb91d3643e47a0}
]]></system-err>
  </testcase>
  <testcase name="testLoadNiFiPropertiesShouldHandleReadFailure" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Set POSIX permissions to []
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp_nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] ERROR org.apache.nifi.properties.NiFiPropertiesLoader - Cannot read from '/home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp_nifi.properties' -- file is missing or not readable
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot load NiFiProperties from [target/tmp_nifi.properties]
]]></system-err>
  </testcase>
  <testcase name="testShouldIgnoreRawKeyFlagIfKeyProvided" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - If the key or password is provided in the arguments, '-r'/'--useRawKey' is ignored
]]></system-err>
  </testcase>
  <testcase name="testDeriveKeyFromPasswordShouldTrimPassword" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.488">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [thisIsABadPassword]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Derived key:  [2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password: [   thisIsABadPassword   ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Derived key:  [2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE]
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationMigratingLoginIdentityProviders" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.074">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA9876543210
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: src/test/resources/login-identity-providers-populated-encrypted.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: target/tmp/tmp-lip.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded login identity providers content (105 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">Xe1cUofec8ZWlLOU||2Fe1OqwNea2/Iuta5uLWoIyJCwG1mX5hf4feKFwAuHYcbQ</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">hIATlDW1zQ0Yq+a7||+UTXT4ZGfitkS7+JXxY0FY2xaw1XmlPIOxVznwpn36NAzQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">Pmu40034FtQshvjj||7Qhj6raWnKESLJWZp+F0K71yMNAJSp57M4cwg39GVvi3rA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">Xe1cUofec8ZWlLOU||2Fe1OqwNea2/Iuta5uLWoIyJCwG1mX5hf4feKFwAuHYcbQ</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">hIATlDW1zQ0Yq+a7||+UTXT4ZGfitkS7+JXxY0FY2xaw1XmlPIOxVznwpn36NAzQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">Pmu40034FtQshvjj||7Qhj6raWnKESLJWZp+F0K71yMNAJSp57M4cwg39GVvi3rA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
]]></system-err>
  </testcase>
  <testcase name="testParseShouldFailIfMigrationPasswordAndKeyBothProvided" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.009">
    <system-out><![CDATA[Only one of '-w'/'--oldPassword' and '-e'/'--oldKey' can be used

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Only one of '-w'/'--oldPassword' and '-e'/'--oldKey' can be used
]]></system-err>
  </testcase>
  <testcase name="testShouldParseOutputLoginIdentityProvidersArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source login-identity-providers.xml and destination login-identity-providers.xml are identical [src/test/resources/login-identity-providers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output login-identity-providers.xml location: src/test/resources/login-identity-providers.xml
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source login-identity-providers.xml and destination login-identity-providers.xml are identical [src/test/resources/login-identity-providers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output login-identity-providers.xml location: src/test/resources/login-identity-providers.xml
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptNiFiPropertiesWithEmptyProtectionScheme" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.031">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read 124 lines from src/test/resources/nifi_with_sensitive_properties_unprotected_and_empty_protection_schemes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0...
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 84 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected_and_empty_protection_schemes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded NiFiProperties from src/test/resources/nifi_with_sensitive_properties_unprotected_and_empty_protection_schemes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 84 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - There are 9 sensitive properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Counted 0 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	SwDf32N4Zt91Y92E||0o9y030qJ/aWl+PMqRM7A5mvKh7piliOzz0sPQSJ8CQ60weR1w
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	h9mo8Xus2LKznp9m||Av+Y7xqUSFEnT7P+F2EjLHBltoUD346jJWBjKqpBSstxsH2s+OfEDUQG
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	qrhpMvQh8s4yhgPA||k8bV9b2bjdda1wHZY7g+GolQC8e5UCJsvxalT+3kb6Pl4e4nl5SsQjlIK8syrw
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 86 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keystorePasswd is protected by aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.administrative.yield.duration		30 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.is.manager		false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.is.node		false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.address		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.authority.provider.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.authority.provider.threads		10
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.flow.retrieval.delay		5 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.node.api.connection.timeout		30 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.node.api.read.timeout		30 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.node.api.request.threads		10
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.node.event.history.size		10
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.node.firewall.file		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.protocol.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.protocol.threads		10
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.manager.safemode.duration		0 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.address		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.protocol.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.protocol.threads		2
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.unicast.manager.address		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.unicast.manager.authority.provider.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.node.unicast.manager.protocol.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.connection.handshake.timeout		45 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.heartbeat.interval		5 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.is.secure		false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.multicast.address		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.multicast.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.multicast.service.broadcast.delay		500 ms
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.multicast.service.locator.attempts		3
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.multicast.service.locator.attempts.delay		1 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.socket.timeout		30 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.cluster.protocol.use.multicast		false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.content.claim.max.appendable.size		10 MB
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.content.claim.max.flow.files		100
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.content.repository.directory.default		./target/content_repository
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.controller.service.configuration.file		./target/controller-services.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.database.directory		./target/database_repository
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flow.configuration.archive.dir		./target/archive/
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flow.configuration.file		./target/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowcontroller.autoResumeState		true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowcontroller.graceful.shutdown.period		10 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowfile.repository.checkpoint.interval		2 mins
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowfile.repository.directory		./target/test-repo
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowfile.repository.partitions		1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.flowservice.writedelay.interval		2 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.h2.url.append		;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.nar.library.directory		./target/resources/NiFiProperties/lib/
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.nar.library.directory.alt		./target/resources/NiFiProperties/lib2/
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.nar.working.directory		./target/work/nar/
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.provenance.repository.max.storage.size		1 GB
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.provenance.repository.max.storage.time		24 hours
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.provenance.repository.rollover.size		100 MB
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.provenance.repository.rollover.time		30 secs
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.provenance.repository.storage.directory		./target/provenance_repository
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.queue.swap.threshold		20000
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.remote.input.secure		true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.remote.input.socket.port		9990
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.reporting.task.configuration.file		./target/reporting-tasks.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keyPasswd		SwDf32N4Zt91Y92E||0o9y030qJ/aWl+PMqRM7A5mvKh7piliOzz0sPQSJ8CQ60weR1w
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keyPasswd.protected		aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keystore		/path/to/keystore.jks
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keystorePasswd		h9mo8Xus2LKznp9m||Av+Y7xqUSFEnT7P+F2EjLHBltoUD346jJWBjKqpBSstxsH2s+OfEDUQG
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keystorePasswd.protected		aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.keystoreType		JKS
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.truststore		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.truststorePasswd		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.truststoreType		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.security.user.authorizer		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.sensitive.props.additional.keys		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.sensitive.props.algorithm		PBEWITHMD5AND256BITAES-CBC-OPENSSL
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.sensitive.props.key		qrhpMvQh8s4yhgPA||k8bV9b2bjdda1wHZY7g+GolQC8e5UCJsvxalT+3kb6Pl4e4nl5SsQjlIK8syrw
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.sensitive.props.key.protected		aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.swap.in.period		5 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.swap.in.threads		1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.swap.out.period		5 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.swap.out.threads		4
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.swap.storage.directory		./target/test-repo/swap
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.templates.directory		./target/templates
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.ui.autorefresh.interval		30 sec
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.ui.banner.text		UI Banner Text
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.ui.banner.text.protected		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.http.host		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.http.port		
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.https.host		nifi.nifi.apache.org
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.https.port		8443
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.jetty.working.directory		./target/work/jetty
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - nifi.web.war.directory		./target/lib
]]></system-err>
  </testcase>
  <testcase name="testShouldParseLoginIdentityProvidersArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.004">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source login-identity-providers.xml and destination login-identity-providers.xml are identical [src/test/resources/login-identity-providers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed login-identity-providers.xml location: src/test/resources/login-identity-providers.xml
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source login-identity-providers.xml and destination login-identity-providers.xml are identical [src/test/resources/login-identity-providers.xml] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed login-identity-providers.xml location: src/test/resources/login-identity-providers.xml
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationOnFlowXmlWithPreviouslyEncryptedNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.041">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 10 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:nififtw!, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original encrypted values: [nifi.security.keyPasswd:ttiSNTC7PUf2Hla7||W2OmVFn4bfB2ZJNBG55SaLneQeZahhF6GIaLZU+i4zRFfxKnlQ, nifi.security.keystorePasswd:vp9C9a8KbSYZFdUM||RoZHB1J+sRgCKG2vKBviOn71tdhsDYH42No+VmIaFMolrTMD/zmwcKev, nifi.security.truststorePasswd:, nifi.sensitive.props.key:UXcrW8T1UKAPJeun||ezUJSp30AvKGsRxJOOXoPUtZonv56Lx1, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key originally protected with aes/gcm/128
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 10 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Tool is not configured to encrypt nifi.properties, but the existing nifi.properties is encrypted and flow.xml.gz was migrated, so manually persisting the new encrypted value to nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# security properties #
nifi.sensitive.props.key=zMRczDn84fx9Br5t||Lf/hhbB8/W842aJORLu+15/0C2qOMglsAlDrAboWHswElg
nifi.sensitive.props.key.protected=aes/gcm/128
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=vp9C9a8KbSYZFdUM||RoZHB1J+sRgCKG2vKBviOn71tdhsDYH42No+VmIaFMolrTMD/zmwcKev
nifi.security.keystorePasswd.protected=aes/gcm/128
nifi.security.keyPasswd=ttiSNTC7PUf2Hla7||W2OmVFn4bfB2ZJNBG55SaLneQeZahhF6GIaLZU+i4zRFfxKnlQ
nifi.security.keyPasswd.protected=aes/gcm/128
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Sensitive property key currently protected with aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA1
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}, enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{7ba6b95a5f4bdf9e332892419c4826c57aec086f5f85561aead36c28997e9f84a79fc69f7e29231f34272212a221c0c2}, enc{a17dba41b407820f20822dd2af3eacc0cd52e6b6ba75160822094349a36b188a2a10b5e4eeb0306357581b545dcae9f0}]
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptLoginIdentityProvidersWithMultipleElementsPerLine" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.032">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property><property name="TLS - Keystore"></property><property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property><property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testWriteAuthorizersShouldHandleUnreadableFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.063">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">FlnvFkSlDB3aOHI7||wi3wtBKuwSk8nGXfdMbLvxfSsyFgbqO5dXw/cYdC7CNbjA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">e94O1fZrHCjrpx7d||gHIVp0rEL5Cyz+Of4uEkRBwDKiudi2pW9Llt9BteGVvVBA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0rGC62MK+qepHHVx||+2bZ0u+7n1h8d7nU/TYaTNOGBJBGhQlVZjs9CfuK2aaECQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">FlnvFkSlDB3aOHI7||wi3wtBKuwSk8nGXfdMbLvxfSsyFgbqO5dXw/cYdC7CNbjA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">e94O1fZrHCjrpx7d||gHIVp0rEL5Cyz+Of4uEkRBwDKiudi2pW9Llt9BteGVvVBA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0rGC62MK+qepHHVx||+2bZ0u+7n1h8d7nU/TYaTNOGBJBGhQlVZjs9CfuK2aaECQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Written lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">FlnvFkSlDB3aOHI7||wi3wtBKuwSk8nGXfdMbLvxfSsyFgbqO5dXw/cYdC7CNbjA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">e94O1fZrHCjrpx7d||gHIVp0rEL5Cyz+Of4uEkRBwDKiudi2pW9Llt9BteGVvVBA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0rGC62MK+qepHHVx||+2bZ0u+7n1h8d7nU/TYaTNOGBJBGhQlVZjs9CfuK2aaECQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptLoginIdentityProvidersWithEmptySensitiveElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.035">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">tnllwcaQ/xekPA20||dn4zTbCeqsL6w9BelcScvuFIOAd3q9rl4Stfv/8NtQEXSw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password"/>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password"/>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">tnllwcaQ/xekPA20||dn4zTbCeqsL6w9BelcScvuFIOAd3q9rl4Stfv/8NtQEXSw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password"/>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password"/>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: tnllwcaQ/xekPA20||dn4zTbCeqsL6w9BelcScvuFIOAd3q9rl4Stfv/8NtQEXSw
]]></system-err>
  </testcase>
  <testcase name="testShouldSerializeNiFiPropertiesAndPreserveFormatWithExistingProtectionSchemes" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.014">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read 30 lines from src/test/resources/nifi_with_few_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0...
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 13 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_few_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded NiFiProperties from src/test/resources/nifi_with_few_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 10 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - There are 9 sensitive properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - There are 3 protected properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Counted 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Expected line count change: 0
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized NiFiProperties to 30 lines
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# security properties #
nifi.sensitive.props.key=n2z+tTTbHuZ4V4V2||uWhdasyDXD4ZG2lMAes/vqh6u4vaz4xgL4aEbF4Y/dXevqk3ulRcOwf1vc4RDQ==
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=oBjT92hIGRElIGOh||MZ6uYuWNBrOA6usq/Jt3DaD2e4otNirZDytac/w/KFe0HOkrJR03vcbo
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=ac/BaE35SL/esLiJ||+ULRvRLYdIDA2VqpE0eQXDEMjaLBMG2kbKOdOwBk/hGebDKlVg==
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptAuthorizersWithMultipleElementsPerLine" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.062">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property><property name="TLS - Keystore"></property><property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property><property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore"/>
    <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
    <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
]]></system-err>
  </testcase>
  <testcase name="testParseShouldWarnIfFlowXmlWillBeOverwritten" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [conf/nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [conf/flow.xml.gz] so the original will be overwritten
]]></system-err>
  </testcase>
  <testcase name="testShouldWriteNiFiPropertiesInSameLocation" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.011">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp_nifi.properties] so the original will be overwritten
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from target/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Wrote to target/tmp_nifi.properties
]]></system-err>
  </testcase>
  <testcase name="testDeriveKeyFromPasswordShouldThrowExceptionForInvalidPasswords" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.008">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading password: [null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot derive key from empty/short password -- password must be at least 12 characters
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading password: []
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot derive key from empty/short password -- password must be at least 12 characters
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading password: [      ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot derive key from empty/short password -- password must be at least 12 characters
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading password: [shortpass]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot derive key from empty/short password -- password must be at least 12 characters
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Reading password: [shortwith    ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Cannot derive key from empty/short password -- password must be at least 12 characters
]]></system-err>
  </testcase>
  <testcase name="testShouldFailOnCliTranslateIfConflictingFlagsPresent" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.072">
    <system-out><![CDATA[When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, '-n'/'--niFiProperties' is required (and '-b'/'--bootstrapConf' is required if the properties are encrypted)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, only '-h', '-v', and '-n'/'-b' with the relevant files are allowed

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, only '-h', '-v', and '-n'/'-b' with the relevant files are allowed

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
When '-c'/'--translateCli' is specified, only '-h', '-v', and '-n'/'-b' with the relevant files are allowed

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-n, nifi.properties, -c]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [--niFiProperties, nifi.properties, -c]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [--verbose, -n, nifi.properties, -b, bootstrap.conf, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-v, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [--verbose, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-b, bootstrap.conf, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [--bootstrapConf, bootstrap.conf, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [--migrate, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-o, output, -c]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Testing with [-x, $s0$, -c]
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFromKeyToPassword" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.49">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key provided directly: 	2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migration key derived from password [drowssaPdaBAsIsiht]: 	7696EBC090B471D068F17CF1E6FA10CD9CBC7300B1F88171E3D597C0472C9747
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Running [key to password] with args: [-n, src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties, -b, target/tmp/tmp_bootstrap.conf, -o, target/tmp/tmp_nifi.properties, -m, -v, -e, 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE, -p, drowssaPdaBAsIsiht]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating key (key to password) with -n src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties -b target/tmp/tmp_bootstrap.conf -o target/tmp/tmp_nifi.properties -m -v -e 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE -p drowssaPdaBAsIsiht
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	bR0Bojvbm25uAN9e||4yj/jhp3z4R5WKqiiG0L2+AyMsbfnQwZxd8Q5eFZMVnT92pSHA
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	Q++jcFpwo/DTALbd||7G3HaB4/w2ehBiak0aOH3Jra+6nJU6ilX6RqqpYxijE19zUEVIJwkh++
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	a3hGt6rdye0fDtRg||2wE1fi65p0MvBIlBbWm6crJCUwLh81Linwc0Wuqz0dy7BQlH6k6Y0dvoWgHfxQ
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=a3hGt6rdye0fDtRg||2wE1fi65p0MvBIlBbWm6crJCUwLh81Linwc0Wuqz0dy7BQlH6k6Y0dvoWgHfxQ
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=Q++jcFpwo/DTALbd||7G3HaB4/w2ehBiak0aOH3Jra+6nJU6ilX6RqqpYxijE19zUEVIJwkh++
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=bR0Bojvbm25uAN9e||4yj/jhp3z4R5WKqiiG0L2+AyMsbfnQwZxd8Q5eFZMVnT92pSHA
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=7696EBC090B471D068F17CF1E6FA10CD9CBC7300B1F88171E3D597C0472C9747
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptSensitiveProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.012">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed nifi.properties location: src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	NoSjlBmCPvPk4/Ft||fe0EzaU5gxo4+HH3Lz94CJlQL1k6E+a6GgNnXeP6o+nPmCZChg
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	ELcuw0O1pVMzWzTI||Jg57glo9eugsLl7eJ87jzF4PsKDBPQKGs3WFLbM1aTN3sfOifMyDTocE
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	bc7wIDIXRs1nT4Pw||BH5YyJTiP9S++nzGdFXR/ZptttayuQ/iaSUYkyGZY1z4uzVzMxE3KqLkAppefA
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted sensitive properties
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptLoginIdentityProvidersWithRenamedProvider" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.035">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">5y8VmgmfCt5E9bx/||WYr7+7LX6sWY9agerWW2Suc+HmPglIMYjp4FZskreKpmkA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">/ZmQQqCUko7l1176||lo/irKW5yOTvDFQM0dqsbFpyJvwZ93xuggSL5BtJAtMm2Q</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">v5q+nAUfdJ8aePkT||0zhh0fv0Mq9k/q1qv+nC+9aaNx7vvNa3uvD4UOIWHNebng</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">5y8VmgmfCt5E9bx/||WYr7+7LX6sWY9agerWW2Suc+HmPglIMYjp4FZskreKpmkA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">/ZmQQqCUko7l1176||lo/irKW5yOTvDFQM0dqsbFpyJvwZ93xuggSL5BtJAtMm2Q</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">v5q+nAUfdJ8aePkT||0zhh0fv0Mq9k/q1qv+nC+9aaNx7vvNa3uvD4UOIWHNebng</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: 5y8VmgmfCt5E9bx/||WYr7+7LX6sWY9agerWW2Suc+HmPglIMYjp4FZskreKpmkA
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: /ZmQQqCUko7l1176||lo/irKW5yOTvDFQM0dqsbFpyJvwZ93xuggSL5BtJAtMm2Q
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: v5q+nAUfdJ8aePkT||0zhh0fv0Mq9k/q1qv+nC+9aaNx7vvNa3uvD4UOIWHNebng
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationForAuthorizers" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.117">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              src/test/resources/authorizers-populated.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              target/tmp/tmp-authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded authorizers content (309 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">AzZCKg7a9WaJ5Hwu||AR7DgoyUNbL3oOUjz+5W0aRUNfXRKjKOGdLPr9K+4FcJmg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">ny2TWqskIVzQ8Hk/||Cza7U6LMw2VmI3Rn2OzCGC0IthdcwqsFYa/c1RzNaK6pAg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">V108rQJdCWdLmzit||NFTnMzVG1Z3g/i3idJ1DDe5i37wmsD54D52h7LTw9pbJjA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">AzZCKg7a9WaJ5Hwu||AR7DgoyUNbL3oOUjz+5W0aRUNfXRKjKOGdLPr9K+4FcJmg</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">ny2TWqskIVzQ8Hk/||Cza7U6LMw2VmI3Rn2OzCGC0IthdcwqsFYa/c1RzNaK6pAg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">V108rQJdCWdLmzit||NFTnMzVG1Z3g/i3idJ1DDe5i37wmsD54D52h7LTw9pbJjA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationOnFlowXmlWithoutEncryptedNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.036">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:, nifi.security.keystorePasswd:, nifi.security.truststorePasswd:, nifi.sensitive.props.key:, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp-nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of flow.xml.gz
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [target/tmp/tmp-flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Migrating flow.xml file at target/tmp/tmp-flow.xml.gz. This could take a while if the flow XML is very large.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=thisIsABadPassword
nifi.sensitive.props.key.protected=
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=
nifi.security.keystoreType=
nifi.security.keystorePasswd=
nifi.security.keyPasswd=
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 83 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp-nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original flow.xml.gz cipher texts: [enc{7468697349734142616453616c742e2e79ad38319f8069990c6ac60cad75639f9d2ab7dff1a0b8b488af2fff659cf353}, enc{7468697349734142616453616c742e2e63a2cd00e648c459e7e45223fefe8d38ab9ed3d71d94be57d5b0e4391980c858}]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated  flow.xml.gz cipher texts: [enc{57b7512ed2399e0ec6ed417dad163f8625fc95252fc80466963042ff819874a4fdd0edca1f40e094b9d2fc754043010e}, enc{dd87308a33fcdd923d9925c5a55252c1055e3f93f671b9a0bc3319a21aa87b38dfa479966f8e3a1c8e965edcff325c68}]
]]></system-err>
  </testcase>
  <testcase name="testEncryptLoginIdentityProvidersShouldHandleCommentedElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.019">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No unencrypted password property elements found in login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldWriteNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.011">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Wrote to target/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=thisIsABadSensitiveKeyPassword
nifi.sensitive.props.key.protected=
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=thisIsABadKeystorePassword
nifi.security.keyPasswd=thisIsABadKeyPassword
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
]]></system-err>
  </testcase>
  <testcase name="testShouldReadPasswordFromConsoleIfNoKeyPresent" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.236">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password flag: true
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Password: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Key hex:  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE]
]]></system-err>
  </testcase>
  <testcase name="testParseShouldFailIfPropertiesAndProvidersMissing" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.08">
    <system-out><![CDATA[One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
Error parsing command line. (Missing argument for option: n)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
Error parsing command line. (Missing argument for option: l)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
Error parsing command line. (Missing argument for option: a)

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
In order to migrate a flow.xml.gz, a nifi.properties file must also be specified via '-n'/'--niFiProperties'.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  target/tmp/tmp-flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Encountered an error
org.apache.commons.cli.MissingArgumentException: Missing argument for option: n
	at org.apache.commons.cli.DefaultParser.checkRequiredArgs(DefaultParser.java:211)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:125)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)
	at org.apache.commons.cli.CommandLineParser$parse.call(Unknown Source)
	at org.apache.nifi.properties.ConfigEncryptionTool.parse(ConfigEncryptionTool.groovy:295)
	at sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:167)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy:423)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:399)
	at groovy.test.GroovyAssert.shouldFail(GroovyAssert.java:95)
	at groovy.util.GroovyTestCase.shouldFail(GroovyTestCase.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:351)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:64)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14.doCall(ConfigEncryptionToolTest.groovy:422)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:421)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2330)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2315)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2356)
	at org.codehaus.groovy.runtime.dgm$186.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest.testParseShouldFailIfPropertiesAndProvidersMissing(ConfigEncryptionToolTest.groovy:421)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Error parsing command line. (Missing argument for option: n)
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Encountered an error
org.apache.commons.cli.MissingArgumentException: Missing argument for option: l
	at org.apache.commons.cli.DefaultParser.checkRequiredArgs(DefaultParser.java:211)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:125)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)
	at org.apache.commons.cli.CommandLineParser$parse.call(Unknown Source)
	at org.apache.nifi.properties.ConfigEncryptionTool.parse(ConfigEncryptionTool.groovy:295)
	at sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:167)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy:423)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:399)
	at groovy.test.GroovyAssert.shouldFail(GroovyAssert.java:95)
	at groovy.util.GroovyTestCase.shouldFail(GroovyTestCase.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:351)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:64)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14.doCall(ConfigEncryptionToolTest.groovy:422)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:421)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2330)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2315)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2356)
	at org.codehaus.groovy.runtime.dgm$186.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest.testParseShouldFailIfPropertiesAndProvidersMissing(ConfigEncryptionToolTest.groovy:421)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Error parsing command line. (Missing argument for option: l)
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - Encountered an error
org.apache.commons.cli.MissingArgumentException: Missing argument for option: a
	at org.apache.commons.cli.DefaultParser.checkRequiredArgs(DefaultParser.java:211)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:125)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:76)
	at org.apache.commons.cli.DefaultParser.parse(DefaultParser.java:60)
	at org.apache.commons.cli.CommandLineParser$parse.call(Unknown Source)
	at org.apache.nifi.properties.ConfigEncryptionTool.parse(ConfigEncryptionTool.groovy:295)
	at sun.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:167)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:70)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy:423)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14$_closure186.doCall(ConfigEncryptionToolTest.groovy)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:399)
	at groovy.test.GroovyAssert.shouldFail(GroovyAssert.java:95)
	at groovy.util.GroovyTestCase.shouldFail(GroovyTestCase.java:209)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:351)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:64)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
	at org.apache.nifi.properties.ConfigEncryptionToolTest$_testParseShouldFailIfPropertiesAndProvidersMissing_closure14.doCall(ConfigEncryptionToolTest.groovy:422)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)
	at groovy.lang.Closure.call(Closure.java:405)
	at groovy.lang.Closure.call(Closure.java:421)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2330)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2315)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2356)
	at org.codehaus.groovy.runtime.dgm$186.invoke(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:244)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)
	at org.apache.nifi.properties.ConfigEncryptionToolTest.testParseShouldFailIfPropertiesAndProvidersMissing(ConfigEncryptionToolTest.groovy:421)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:130)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)
	at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)
	at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:485)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Error parsing command line. (Missing argument for option: a)
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] One or more of ['-n'/'--niFiProperties', '-l'/'--loginIdentityProviders', '-a'/'--authorizers'] must be provided unless '-x'/--'encryptFlowXmlOnly' is specified
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] In order to migrate a flow.xml.gz, a nifi.properties file must also be specified via '-n'/'--niFiProperties'.
]]></system-err>
  </testcase>
  <testcase name="testShouldSerializeNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.008">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 2 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized NiFiProperties to 3 lines
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 
#Thu May 02 02:12:59 WEST 2024
key=value
key2=value2
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptLoginIdentityProvidersWithMultilineElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.045">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password">
            thisIsABadPassword
        </property>

        <property name="TLS - Keystore"></property>
        <property
                name="TLS - Keystore Password">thisIsABadPassword
        </property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name=
                          "TLS - Truststore Password">
            thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"/>
        <property name="Manager Password" encryption="aes/gcm/256">Pw3wLe2EP7jrCgIZ||icwLEePgg8n9XcGKF2wh1iQAS3clRExAP1H/h6LJDdlPDg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Ix5Upduu23s1v1CS||wFmiS8xfx0uqPqU8LV/Ey47VEX7CsD1F7vT4fggMXIs1pg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">tO6C+guec1eEzlf/||HVKhVZxY8AaMNOA5xKX1u3MiORpH3tR4T7bgr4lZIeY5wg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"/>
        <property name="Manager Password" encryption="aes/gcm/256">Pw3wLe2EP7jrCgIZ||icwLEePgg8n9XcGKF2wh1iQAS3clRExAP1H/h6LJDdlPDg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Ix5Upduu23s1v1CS||wFmiS8xfx0uqPqU8LV/Ey47VEX7CsD1F7vT4fggMXIs1pg</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">tO6C+guec1eEzlf/||HVKhVZxY8AaMNOA5xKX1u3MiORpH3tR4T7bgr4lZIeY5wg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: Pw3wLe2EP7jrCgIZ||icwLEePgg8n9XcGKF2wh1iQAS3clRExAP1H/h6LJDdlPDg
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: Ix5Upduu23s1v1CS||wFmiS8xfx0uqPqU8LV/Ey47VEX7CsD1F7vT4fggMXIs1pg
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: tO6C+guec1eEzlf/||HVKhVZxY8AaMNOA5xKX1u3MiORpH3tR4T7bgr4lZIeY5wg
]]></system-err>
  </testcase>
  <testcase name="testShouldParseOutputAuthorizersArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output authorizers.xml location: lmx.srezirohtua/secruoser/tset/crs
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed output authorizers.xml location: lmx.srezirohtua/secruoser/tset/crs
]]></system-err>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldHandleManyProviders" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.054">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>

    <!-- This is a dummy provider that should show up unaltered in the output -->
    <provider>
        <identifier>dummy-provider-1</identifier>
        <class>com.example.MyProvider1</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!-- This is a dummy provider that should show up unaltered in the output -->
    <provider>
        <identifier>dummy-provider-2</identifier>
        <class>com.example.MyProvider2</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>

    
    <provider>
        <identifier>dummy-provider-1</identifier>
        <class>com.example.MyProvider1</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">ot52nG+jDoq1mrn/||ydiFvMySi+G9W1hWdKxh1tbtm0zCETYOniwTH3rjnIGWMA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">WkYut/CRAkbDayZl||gW5wWghDIZtGWG+VAqNBX41oM9gsXNR3xzFyP93oCa9vbw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">8WbYJ6YN/LpCXDtv||y7yY1+yJWTORUDmnsAqA9Mm3rB7TEsYh6Pftioe3wqpnuQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    <provider>
        <identifier>dummy-provider-2</identifier>
        <class>com.example.MyProvider2</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>

    
    <provider>
        <identifier>dummy-provider-1</identifier>
        <class>com.example.MyProvider1</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">ot52nG+jDoq1mrn/||ydiFvMySi+G9W1hWdKxh1tbtm0zCETYOniwTH3rjnIGWMA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">WkYut/CRAkbDayZl||gW5wWghDIZtGWG+VAqNBX41oM9gsXNR3xzFyP93oCa9vbw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">8WbYJ6YN/LpCXDtv||y7yY1+yJWTORUDmnsAqA9Mm3rB7TEsYh6Pftioe3wqpnuQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    <provider>
        <identifier>dummy-provider-2</identifier>
        <class>com.example.MyProvider2</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>

    <!-- This is a dummy provider that should show up unaltered in the output -->
    <provider>
        <identifier>dummy-provider-1</identifier>
        <class>com.example.MyProvider1</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">ot52nG+jDoq1mrn/||ydiFvMySi+G9W1hWdKxh1tbtm0zCETYOniwTH3rjnIGWMA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">WkYut/CRAkbDayZl||gW5wWghDIZtGWG+VAqNBX41oM9gsXNR3xzFyP93oCa9vbw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">8WbYJ6YN/LpCXDtv||y7yY1+yJWTORUDmnsAqA9Mm3rB7TEsYh6Pftioe3wqpnuQ</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!-- This is a dummy provider that should show up unaltered in the output -->
    <provider>
        <identifier>dummy-provider-2</identifier>
        <class>com.example.MyProvider2</class>
        <property name="Property 1">Value 1</property>
        <property name="Property 2">Value 2</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testParseShouldFailOnFlowWithoutNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.013">
    <system-out><![CDATA[In order to migrate a flow.xml.gz, a nifi.properties file must also be specified via '-n'/'--niFiProperties'.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source flow.xml.gz and destination flow.xml.gz are identical [conf/flow.xml.gz] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] In order to migrate a flow.xml.gz, a nifi.properties file must also be specified via '-n'/'--niFiProperties'.
]]></system-err>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldHandleEmptyFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.009">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 

[Fatal Error] :1:1: Premature end of file.
[main] ERROR org.apache.nifi.properties.ConfigEncryptionTool - No provider element with class org.apache.nifi.ldap.LdapProvider found in XML content; the file could be empty or the element may be missing or commented out
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 

]]></system-err>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldRespectComments" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.049">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">1kt7yggVS0QeNKw7||x1uum3W2i+fTGKMKfyI8fu78B7W8A970eWv3+GQHcis2Rw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Q7qQzRnxJsJHExvI||fU9/vH6JNEKPdteq832bHNGsD/AYy+243wh32ZMx0Gy55w</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">UXYvCpp+ASpySSQc||/75kiiS78/Dlwzhs6kWLyID2/r/E1KYIgeHvGLdgySEyaw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">1kt7yggVS0QeNKw7||x1uum3W2i+fTGKMKfyI8fu78B7W8A970eWv3+GQHcis2Rw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">Q7qQzRnxJsJHExvI||fU9/vH6JNEKPdteq832bHNGsD/AYy+243wh32ZMx0Gy55w</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">UXYvCpp+ASpySSQc||/75kiiS78/Dlwzhs6kWLyID2/r/E1KYIgeHvGLdgySEyaw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">1kt7yggVS0QeNKw7||x1uum3W2i+fTGKMKfyI8fu78B7W8A970eWv3+GQHcis2Rw</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">Q7qQzRnxJsJHExvI||fU9/vH6JNEKPdteq832bHNGsD/AYy+243wh32ZMx0Gy55w</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">UXYvCpp+ASpySSQc||/75kiiS78/Dlwzhs6kWLyID2/r/E1KYIgeHvGLdgySEyaw</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldUpdateBootstrapContentsWithKeyAndComment" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated bootstrap.conf lines: [# Root key in hexadecimal format for encrypted sensitive configuration values, nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
]]></system-err>
  </testcase>
  <testcase name="testShouldReadKeyFromConsole" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [0123 4567]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [   0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210   ]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [non-hex-chars]
]]></system-err>
  </testcase>
  <testcase name="testDecryptLoginIdentityProvidersShouldHandleCommentedElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.022">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in login-identity-providers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <!-- To enable the ldap-provider remove 2 lines. This is 1 of 2. 
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN"></property>
        <property name="Manager Password"></property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password"></property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password"></property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the ldap-provider remove 2 lines. This is 2 of 2. -->

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldTranslateCliWithEncryptedInput" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.038">
    <system-out><![CDATA[baseUrl=https://nifi.nifi.apache.org:8443
keystore=/path/to/keystore.jks
keystoreType=JKS
keystorePasswd=thisIsABadKeystorePassword
keyPasswd=thisIsABadKeyPassword
truststore=
truststoreType=
truststorePasswd=
proxiedEntity=
Tried to exit with status 0.

usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi_with_sensitive_properties_protected_aes.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - STDOUT:
	baseUrl=https://nifi.nifi.apache.org:8443
	keystore=/path/to/keystore.jks
	keystoreType=JKS
	keystorePasswd=thisIsABadKeystorePassword
	keyPasswd=thisIsABadKeyPassword
	truststore=
	truststoreType=
	truststorePasswd=
	proxiedEntity=
]]></system-err>
  </testcase>
  <testcase name="testShouldDecryptLoginIdentityProvidersWithMultilineElements" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.025">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption=
                "aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property
                name="TLS - Keystore Password"
                encryption="aes/gcm/128">
            Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g
        </property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt 
            Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g
         using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Decrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testWriteLoginIdentityProvidersShouldHandleUnreadableFile" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.022">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">L1QF5kp2HdfV7DcL||QwrZmgH3VxMZT5yWrmtKWtZm6qvhG3EoOQkCv0SP12kIQA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">kmV0+lyQepF8LAYk||4MmXeBXRMXo1SsGk0dqAe+7pyLf4fLEIuDxh37KlAcpb+Q</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">2+LShctwHezqz9Sg||+wsEAND/xCI+CUjlopkPsdX/LywsCmQw6muU/M3xuxJy8Q</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">L1QF5kp2HdfV7DcL||QwrZmgH3VxMZT5yWrmtKWtZm6qvhG3EoOQkCv0SP12kIQA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">kmV0+lyQepF8LAYk||4MmXeBXRMXo1SsGk0dqAe+7pyLf4fLEIuDxh37KlAcpb+Q</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">2+LShctwHezqz9Sg||+wsEAND/xCI+CUjlopkPsdX/LywsCmQw6muU/M3xuxJy8Q</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Written lines: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">L1QF5kp2HdfV7DcL||QwrZmgH3VxMZT5yWrmtKWtZm6qvhG3EoOQkCv0SP12kIQA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">kmV0+lyQepF8LAYk||4MmXeBXRMXo1SsGk0dqAe+7pyLf4fLEIuDxh37KlAcpb+Q</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">2+LShctwHezqz9Sg||+wsEAND/xCI+CUjlopkPsdX/LywsCmQw6muU/M3xuxJy8Q</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationMultipleTimes" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.519">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Derived key from password [thisIsABadPassword]: 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main first time with -n src/test/resources/nifi_with_sensitive_properties_unprotected.properties -b target/tmp/tmp_bootstrap.conf -o target/tmp/tmp_nifi.properties -p thisIsABadPassword -v
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	aoSCkneFJwebFovO||jUBU7b2pkiPVZgUQB+3Suw1+2vN9MUtGwC6eR775GJDngA2CQw
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	ja6qU2ffVzTcBIrT||fIxLWhN4qyrCwaBTLkJCY4nFlCNihB6BcmZ2UI8lsdDDknNyG7PJ+I8N
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	wJkC7+77BzWBQbTn||SLankRJZZUWL1vTGiKoHbccxpPFfYapCXANUGPrfHPvUU9oH4GdCKrEIeYPXPg
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - [EXPECTED] Tried to exit with status 0.
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Invoked #main second time with -n target/tmp/tmp_nifi.properties -b target/tmp/tmp_bootstrap.conf -p thisIsABadPassword -v
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [target/tmp/tmp_nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.ui.banner.text with aes/gcm/256 -> 	JvwtNIH700ayK/en||SKDM67r2YPkQC47SbVaLINfpRPgRRxNnQk2ZPMAD
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.ui.banner.text.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	Q4GW/3uTE8U9lvN/||tRXvKCBphUkdLkPKbfSnFXkxprC0phzlGKJZsGQdrvN3u3d7jQ
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	u4vGvcQ2OB0hjYPH||C3Gr+IgIF5VoQNH9WYwwfYUWSrWXYEWnpefiSOUda0wO0dN1WUvaJaUz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	V5P5pRG44eEYNCiZ||Nz4Q18mg6vQfQjvtKdmpjM2pV1ieNhxok+zB6PP5lq8uehmNI1GC8qkA90kwRA
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 86 keys including 4 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=JvwtNIH700ayK/en||SKDM67r2YPkQC47SbVaLINfpRPgRRxNnQk2ZPMAD
nifi.ui.banner.text.protected=aes/gcm/256
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=V5P5pRG44eEYNCiZ||Nz4Q18mg6vQfQjvtKdmpjM2pV1ieNhxok+zB6PP5lq8uehmNI1GC8qkA90kwRA
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=nifi.ui.banner.text

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=u4vGvcQ2OB0hjYPH||C3Gr+IgIF5VoQNH9WYwwfYUWSrWXYEWnpefiSOUda0wO0dN1WUvaJaUz
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=Q4GW/3uTE8U9lvN/||tRXvKCBphUkdLkPKbfSnFXkxprC0phzlGKJZsGQdrvN3u3d7jQ
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 86 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
]]></system-err>
  </testcase>
  <testcase name="testShouldPrintHelpMessage" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.026">
    <system-out><![CDATA[usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
usage: org.apache.nifi.properties.ConfigEncryptionTool [-h] [-v] [-n <file>] [-o <file>] [-l <file>] [-i <file>] [-a <file>] [-u <file>] [-f <file>] [-g <file>]
       [-b <file>] [-S <protectionScheme>] [-k <keyhex>] [-e <keyhex>] [-H <protectionScheme>] [-p <password>] [-w <password>] [-r] [-m] [-x] [-s
       <password|keyhex>] [-A <algorithm>] [-P <algorithm>] [-c]

This tool reads from a nifi.properties and/or login-identity-providers.xml file with plain sensitive configuration values, prompts the user for a root key, and
encrypts each value. It will replace the plain value with the protected value in the same file (or write to a new file if specified). It can also be used to
migrate already-encrypted values in those files or in flow.xml.gz to be encrypted with a new key.

 -h,--help                                     Show usage information (this message)
 -v,--verbose                                  Sets verbose mode (default false)
 -n,--niFiProperties <file>                    The nifi.properties file containing unprotected config values (will be overwritten unless -o is specified)
 -o,--outputNiFiProperties <file>              The destination nifi.properties file containing protected config values (will not modify input nifi.properties)
 -l,--loginIdentityProviders <file>            The login-identity-providers.xml file containing unprotected config values (will be overwritten unless -i is
                                               specified)
 -i,--outputLoginIdentityProviders <file>      The destination login-identity-providers.xml file containing protected config values (will not modify input
                                               login-identity-providers.xml)
 -a,--authorizers <file>                       The authorizers.xml file containing unprotected config values (will be overwritten unless -u is specified)
 -u,--outputAuthorizers <file>                 The destination authorizers.xml file containing protected config values (will not modify input authorizers.xml)
 -f,--flowXml <file>                           The flow.xml.gz file currently protected with old password (will be overwritten unless -g is specified)
 -g,--outputFlowXml <file>                     The destination flow.xml.gz file containing protected config values (will not modify input flow.xml.gz)
 -b,--bootstrapConf <file>                     The bootstrap.conf file to persist root key and to optionally provide any configuration for the protection
                                               scheme.
 -S,--protectionScheme <protectionScheme>      Selects the protection scheme for encrypted properties.  Valid values are: [AES_GCM, AWS_SECRETSMANAGER, AWS_KMS,
                                               AZURE_KEYVAULT_KEY, AZURE_KEYVAULT_SECRET, GCP_KMS, HASHICORP_VAULT_KV, HASHICORP_VAULT_TRANSIT] (default is
                                               AES_GCM)
 -k,--key <keyhex>                             The raw hexadecimal key to use to encrypt the sensitive properties
 -e,--oldKey <keyhex>                          The old raw hexadecimal key to use during key migration
 -H,--oldProtectionScheme <protectionScheme>   The old protection scheme to use during encryption migration (see --protectionScheme for possible values).
                                               Default is AES_GCM
 -p,--password <password>                      The password from which to derive the key to use to encrypt the sensitive properties
 -w,--oldPassword <password>                   The old password from which to derive the key during migration
 -r,--useRawKey                                If provided, the secure console will prompt for the raw key value in hexadecimal form
 -m,--migrate                                  If provided, the nifi.properties and/or login-identity-providers.xml sensitive properties will be re-encrypted
                                               with the new scheme
 -x,--encryptFlowXmlOnly                       If provided, the properties in flow.xml.gz will be re-encrypted with a new key but the nifi.properties and/or
                                               login-identity-providers.xml files will not be modified
 -s,--propsKey <password|keyhex>               The password or key to use to encrypt the sensitive processor properties in flow.xml.gz
 -A,--newFlowAlgorithm <algorithm>             The algorithm to use to encrypt the sensitive processor properties in flow.xml.gz
 -P,--newFlowProvider <algorithm>              The security provider to use to encrypt the sensitive processor properties in flow.xml.gz
 -c,--translateCli                             Translates the nifi.properties file to a format suitable for the NiFi CLI tool

Java home: null
NiFi Toolkit home: null
]]></system-out>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldHandleRenamedProvider" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.049">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter"></property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">vyCbd0OohW6Vmh+d||MM481VaRYzlTaIJCjV+yRyR7V+1m6RZRQED6DgwOG2nzlg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">JjfSCYGqZouu2J7Y||AtIh6RkiekTDkx4K+FdzMFDdC9APIydXOP5g/l9DdPEkGQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0g/EJIJrfv9q5ugS||zbgFYJXncLZyEnGXevX3pJC+RcrqvaY0DpJbplbh0wZjuA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted XML: 
<?xml version="1.0" encoding="UTF-8"?><loginIdentityProviders>
    
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">vyCbd0OohW6Vmh+d||MM481VaRYzlTaIJCjV+yRyR7V+1m6RZRQED6DgwOG2nzlg</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">JjfSCYGqZouu2J7Y||AtIh6RkiekTDkx4K+FdzMFDdC9APIydXOP5g/l9DdPEkGQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">0g/EJIJrfv9q5ugS||zbgFYJXncLZyEnGXevX3pJC+RcrqvaY0DpJbplbh0wZjuA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    
    
</loginIdentityProviders>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>definitely-not-dap-lay-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">vyCbd0OohW6Vmh+d||MM481VaRYzlTaIJCjV+yRyR7V+1m6RZRQED6DgwOG2nzlg</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">JjfSCYGqZouu2J7Y||AtIh6RkiekTDkx4K+FdzMFDdC9APIydXOP5g/l9DdPEkGQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">0g/EJIJrfv9q5ugS||zbgFYJXncLZyEnGXevX3pJC+RcrqvaY0DpJbplbh0wZjuA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter"/>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldWriteKeyToBootstrapConf" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.006">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldParseBootstrapConfArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed bootstrap.conf location: src/test/resources/bootstrap.conf
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed bootstrap.conf location: src/test/resources/bootstrap.conf
]]></system-err>
  </testcase>
  <testcase name="testShouldReadKeyFromConsoleIfFlagProvided" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.002">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Using password flag: false
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Password: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Key hex:  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read key: [0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFromPasswordToKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.466">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key derived from password [thisIsABadPassword]: 	2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migration key provided directly: 	0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Running [password to key] with args: [-n, src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties, -b, target/tmp/tmp_bootstrap.conf, -o, target/tmp/tmp_nifi.properties, -m, -v, -w, thisIsABadPassword, -k, 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating key (password to key) with -n src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties -b target/tmp/tmp_bootstrap.conf -o target/tmp/tmp_nifi.properties -m -v -w thisIsABadPassword -k 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  conf/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	wcAxfc8Nf4ljg/gg||1C63GMC7EUVwfOVtrFZ8HZ8HQZwGsQRZTtndGmdUjank//3xgw
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	zdVj4OZ5aDmpxuFh||0jw4tGVKp2vz243AmzDtul6bJuwUJQV8L1OhwcIpAGwUh8dS4Ap2Tj4A
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	5YT6xClqQvvu4IUo||GPbvdJKXnVStToQyyDie+GioyvdY1oUZbdhYu5wKH9nODin4NGyK0A/u/IFnxg
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=5YT6xClqQvvu4IUo||GPbvdJKXnVStToQyyDie+GioyvdY1oUZbdhYu5wKH9nODin4NGyK0A/u/IFnxg
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=zdVj4OZ5aDmpxuFh||0jw4tGVKp2vz243AmzDtul6bJuwUJQV8L1OhwcIpAGwUh8dS4Ap2Tj4A
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=wcAxfc8Nf4ljg/gg||1C63GMC7EUVwfOVtrFZ8HZ8HQZwGsQRZTtndGmdUjank//3xgw
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldLoadNiFiProperties" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.002">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi_with_sensitive_properties_unprotected.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed nifi.properties location: src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded NiFiProperties from src/test/resources/nifi_with_sensitive_properties_unprotected.properties
]]></system-err>
  </testcase>
  <testcase name="testFindFieldsInStream" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Found 2 fields in src/test/resources/flow.xml.gz that matched enc\{[a-fA-F0-9]+?\}
]]></system-err>
  </testcase>
  <testcase name="testShouldParseKeyArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key: 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed key: 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldParseNiFiPropertiesArgument" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.003">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed nifi.properties location: src/test/resources/nifi.properties
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source nifi.properties and destination nifi.properties are identical [src/test/resources/nifi.properties] so the original will be overwritten
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Parsed nifi.properties location: src/test/resources/nifi.properties
]]></system-err>
  </testcase>
  <testcase name="testShouldMigrateFromKeyToKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.029">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key provided directly: 	2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migration key provided directly: 	0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Running [key to key] with args: [-n, src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties, -b, target/tmp/tmp_bootstrap.conf, -o, target/tmp/tmp_nifi.properties, -m, -v, -e, 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE, -k, 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Migrating key (key to key) with -n src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties -b target/tmp/tmp_bootstrap.conf -o target/tmp/tmp_nifi.properties -m -v -e 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE -k 0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  src/test/resources/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_protected_aes_password.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	uOgoQYmYWgf5pw+Y||emu3/q01U2w8vsNgea929jk9xIYOBEcViUFVi/2TampKw4ebKA
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	qdJmmz4Z05TH2du3||HOH5SnZ/4cFQ1Y5YgJpAftaoa2idUfovS12LQrw3MpXwBk/K1sfysExe
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	ieiQO4ewOdkWZ3Vo||xzDM4yDMWSXzQRsXbPGptAUB26AzT1KDUmT9QquDagGZWhRCJrDzwTfpD/xpvw
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=ieiQO4ewOdkWZ3Vo||xzDM4yDMWSXzQRsXbPGptAUB26AzT1KDUmT9QquDagGZWhRCJrDzwTfpD/xpvw
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=qdJmmz4Z05TH2du3||HOH5SnZ/4cFQ1Y5YgJpAftaoa2idUfovS12LQrw3MpXwBk/K1sfysExe
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=uOgoQYmYWgf5pw+Y||emu3/q01U2w8vsNgea929jk9xIYOBEcViUFVi/2TampKw4ebKA
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationWithPassword" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.253">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Derived key from password [thisIsABadPassword]: 2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Loaded 82 properties from input file
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original sensitive values: [nifi.security.keyPasswd:thisIsABadKeyPassword, nifi.security.keystorePasswd:thisIsABadKeystorePassword, nifi.security.truststorePasswd:, nifi.sensitive.props.key:thisIsABadSensitiveKeyPassword, nifi.provenance.repository.encryption.key:null, nifi.provenance.repository.encryption.key.provider.password:null, nifi.flowfile.repository.encryption.key.provider.password:null, nifi.content.repository.encryption.key.provider.password:null, nifi.repository.encryption.key.provider.keystore.password:null]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 82 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/src/test/resources/nifi_with_sensitive_properties_unprotected.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded NiFiProperties instance with 82 properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keyPasswd with aes/gcm/256 -> 	CkAUL1C0JZ8EAsMU||lzTgh2pWSe1/waCUi8TVHr1uRBZj4YUREJmsx7ulcrUSY44r8w
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keyPasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.security.keystorePasswd with aes/gcm/256 -> 	GzkXygtEiTU0tAkh||yf2Vn9wS/i6hl3gabUPrY2nWouEZEj9l7hdlK0LCkOG9rNnIx8TVDYY1
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.security.keystorePasswd.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Protected nifi.sensitive.props.key with aes/gcm/256 -> 	u/y4/VsIvsvRW3jh||UCFxxLG+mL8kCu9PnWLTt9tPPQFdwmmjUAp0OfDSdpQ3pQ+rFy6tr3DimgbC3Q
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated protection key nifi.sensitive.props.key.protected
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Final result: 85 keys including 3 protected keys
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated nifi.properties:
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - 

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file=./target/flow.xml.gz
nifi.flow.configuration.archive.dir=./target/archive/
nifi.flowcontroller.autoResumeState=true
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=2 sec
nifi.administrative.yield.duration=30 sec

nifi.reporting.task.configuration.file=./target/reporting-tasks.xml
nifi.controller.service.configuration.file=./target/controller-services.xml
nifi.templates.directory=./target/templates
nifi.ui.banner.text=UI Banner Text
nifi.ui.autorefresh.interval=30 sec
nifi.nar.library.directory=./target/resources/NiFiProperties/lib/
nifi.nar.library.directory.alt=./target/resources/NiFiProperties/lib2/
nifi.nar.working.directory=./target/work/nar/

# H2 Settings
nifi.database.directory=./target/database_repository
nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE

# FlowFile Repository
nifi.flowfile.repository.directory=./target/test-repo
nifi.flowfile.repository.partitions=1
nifi.flowfile.repository.checkpoint.interval=2 mins
nifi.queue.swap.threshold=20000
nifi.swap.storage.directory=./target/test-repo/swap
nifi.swap.in.period=5 sec
nifi.swap.in.threads=1
nifi.swap.out.period=5 sec
nifi.swap.out.threads=4

# Content Repository
nifi.content.claim.max.appendable.size=10 MB
nifi.content.claim.max.flow.files=100
nifi.content.repository.directory.default=./target/content_repository

# Provenance Repository Properties
nifi.provenance.repository.storage.directory=./target/provenance_repository
nifi.provenance.repository.max.storage.time=24 hours
nifi.provenance.repository.max.storage.size=1 GB
nifi.provenance.repository.rollover.time=30 secs
nifi.provenance.repository.rollover.size=100 MB

# Site to Site properties
nifi.remote.input.socket.port=9990
nifi.remote.input.secure=true

# web properties #
nifi.web.war.directory=./target/lib
nifi.web.http.host=
nifi.web.http.port=
nifi.web.https.host=nifi.nifi.apache.org
nifi.web.https.port=8443
nifi.web.jetty.working.directory=./target/work/jetty

# security properties #
nifi.sensitive.props.key=u/y4/VsIvsvRW3jh||UCFxxLG+mL8kCu9PnWLTt9tPPQFdwmmjUAp0OfDSdpQ3pQ+rFy6tr3DimgbC3Q
nifi.sensitive.props.key.protected=aes/gcm/256
nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
nifi.sensitive.props.additional.keys=

nifi.security.keystore=/path/to/keystore.jks
nifi.security.keystoreType=JKS
nifi.security.keystorePasswd=GzkXygtEiTU0tAkh||yf2Vn9wS/i6hl3gabUPrY2nWouEZEj9l7hdlK0LCkOG9rNnIx8TVDYY1
nifi.security.keystorePasswd.protected=aes/gcm/256
nifi.security.keyPasswd=CkAUL1C0JZ8EAsMU||lzTgh2pWSe1/waCUi8TVHr1uRBZj4YUREJmsx7ulcrUSY44r8w
nifi.security.keyPasswd.protected=aes/gcm/256
nifi.security.truststore=
nifi.security.truststoreType=
nifi.security.truststorePasswd=
nifi.security.user.authorizer=

# cluster common properties (cluster manager and nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval=5 sec
nifi.cluster.protocol.is.secure=false
nifi.cluster.protocol.socket.timeout=30 sec
nifi.cluster.protocol.connection.handshake.timeout=45 sec
# if multicast is used, then nifi.cluster.protocol.multicast.xxx properties must be configured #
nifi.cluster.protocol.use.multicast=false
nifi.cluster.protocol.multicast.address=
nifi.cluster.protocol.multicast.port=
nifi.cluster.protocol.multicast.service.broadcast.delay=500 ms
nifi.cluster.protocol.multicast.service.locator.attempts=3
nifi.cluster.protocol.multicast.service.locator.attempts.delay=1 sec

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node=false
nifi.cluster.node.address=
nifi.cluster.node.protocol.port=
nifi.cluster.node.protocol.threads=2
# if multicast is not used, nifi.cluster.node.unicast.xxx must have same values as nifi.cluster.manager.xxx #
nifi.cluster.node.unicast.manager.address=
nifi.cluster.node.unicast.manager.protocol.port=
nifi.cluster.node.unicast.manager.authority.provider.port=

# cluster manager properties (only configure for cluster manager) #
nifi.cluster.is.manager=false
nifi.cluster.manager.address=
nifi.cluster.manager.protocol.port=
nifi.cluster.manager.authority.provider.port=
nifi.cluster.manager.authority.provider.threads=10
nifi.cluster.manager.node.firewall.file=
nifi.cluster.manager.node.event.history.size=10
nifi.cluster.manager.node.api.connection.timeout=30 sec
nifi.cluster.manager.node.api.read.timeout=30 sec
nifi.cluster.manager.node.api.request.threads=10
nifi.cluster.manager.flow.retrieval.delay=5 sec
nifi.cluster.manager.protocol.threads=10
nifi.cluster.manager.safemode.duration=0 sec
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] INFO org.apache.nifi.properties.NiFiPropertiesLoader - Loaded 85 properties from /home/alex/Repositories/nifi/nifi-toolkit/nifi-toolkit-encrypt-config/target/tmp/tmp_nifi.properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationForAuthorizersWithComplexUserSearchFilter" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.122">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              src/test/resources/authorizers-populated-complex-filter.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              target/tmp/tmp-authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  src/test/resources/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded authorizers content (309 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - No encrypted password property elements found in authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">eQ857km412Tl6q6R||q6hXC6JpH5kYEt2yTIcBaXFC2NxRHjvbMUhHpmuyQdBZPA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">AODfeN/TJad9M13n||5MVgFGyjbKqS7bGmacDY0fmVxLf0nMPWuAKArqXapodstA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">UxjSq/P8QkawBAd8||f9ivzzEaWj/OPfSLOJeMipEQ+WPDiGjEi75CeQ2onMjpsA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">eQ857km412Tl6q6R||q6hXC6JpH5kYEt2yTIcBaXFC2NxRHjvbMUhHpmuyQdBZPA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">AODfeN/TJad9M13n||5MVgFGyjbKqS7bGmacDY0fmVxLf0nMPWuAKArqXapodstA</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">UxjSq/P8QkawBAd8||f9ivzzEaWj/OPfSLOJeMipEQ+WPDiGjEi75CeQ2onMjpsA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210
]]></system-err>
  </testcase>
  <testcase name="testSerializeLoginIdentityProvidersAndPreserveFormatShouldHandleComplexProperty" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.049">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="User Search Base"></property>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>

    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Serialized lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the login identity providers to use when running securely. In order
    to use a specific provider it must be configured here and it's identifier
    must be specified in the nifi.properties file.
-->
<loginIdentityProviders>
    <!--
        Identity Provider for users logging in with username/password against an LDAP server.
        
        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, or START_TLS.
        
        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.
            
        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully 
            before the target context is closed. Defaults to false.
            
        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
       
        'Url' - Url of the LDAP servier (i.e. ldap://<hostname>:<port>).
        'User Search Base' - Base DN for searching for users (i.e. CN=Users,DC=example,DC=com).
        'User Search Filter' - Filter for searching for users against the 'User Search Base'.
            (i.e. sAMAccountName={0}). The user specified name is inserted into '{0}'.
            
        'Authentication Expiration' - The duration of how long the user authentication is valid
            for. If the user never logs out, they will be required to log back in following
            this duration.
    -->
    <provider>
        <identifier>ldap-provider</identifier>
        <class>org.apache.nifi.ldap.LdapProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>
        
        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="User Search Base"/>
        <property name="User Search Filter">(&amp; (objectCategory=Person)(sAMAccountName=*)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(sAMAccountName=$*)))</property>

        <property name="Authentication Expiration">12 hours</property>
    </provider>


    <!--
        Identity Provider for users logging in with username/password against a Kerberos KDC server.

        'Default Realm' - Default realm to provide when user enters incomplete user principal (i.e. NIFI.APACHE.ORG).
        'Authentication Expiration' - The duration of how long the user authentication is valid for. If the user never logs out, they will be required to log back in following this duration.
    -->
    <!-- To enable the kerberos-provider remove 2 lines. This is 1 of 2.
    <provider>
        <identifier>kerberos-provider</identifier>
        <class>org.apache.nifi.kerberos.KerberosProvider</class>
        <property name="Default Realm">NIFI.APACHE.ORG</property>
        <property name="Authentication Expiration">12 hours</property>
    </provider>
    To enable the kerberos-provider remove 2 lines. This is 2 of 2. -->
</loginIdentityProviders>
]]></system-err>
  </testcase>
  <testcase name="testShouldUpdateBootstrapContentsWithKey" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated bootstrap.conf lines: [# Root key in hexadecimal format for encrypted sensitive configuration values, nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA98765432100123456789ABCDEFFEDCBA9876543210]
]]></system-err>
  </testcase>
  <testcase name="testShouldPerformFullOperationMigratingAuthorizers" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.1">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original key line from bootstrap.conf: nifi.bootstrap.sensitive.key=0123456789ABCDEFFEDCBA9876543210
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Original XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/128">q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password" encryption="aes/gcm/128">Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Handling encryption of authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool -        bootstrap.conf:               target/tmp/tmp_bootstrap.conf
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) nifi.properties:              null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) login-identity-providers.xml: null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  authorizers.xml:              src/test/resources/authorizers-populated-encrypted.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) authorizers.xml:              target/tmp/tmp-authorizers.xml
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (src)  flow.xml.gz:                  src/test/resources/flow.xml.gz
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - (dest) flow.xml.gz:                  null
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Key migration mode activated
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Loaded authorizers content (309 lines)
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt q4r7WIgN0MaxdAKM||SGgdCTPGSFEcuH4RraMYEdeyVbOx93abdWTVSWvh1w+klA using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to decrypt Uah59TWX+Ru5GY5p||B44RT/LJtC08QWA5ehQf01JxIpf0qSJUzug25UwkF5a50g using protection scheme aes/gcm/128
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="none">thisIsABadPassword</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="none">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">hqpv6mW6RWqx7pfF||NlnERHJ6l87IzmarhUN0yKtsyfNhy5NrOPKYMz3IMyy3BA</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">0vUkqxX8ln+yhQ2V||gCiSTTOzBKLkMC9Xm9vArDlIGovKpfsFFkELtcyh3JfplQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">KyzukVG3EYMFX5JP||ARcjsAHq/7BbvEoSg1yvI4V/X7dZFFk9TPNE/73s7Tu6dA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated XML content: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property encryption="aes/gcm/256" name="Manager Password">hqpv6mW6RWqx7pfF||NlnERHJ6l87IzmarhUN0yKtsyfNhy5NrOPKYMz3IMyy3BA</property>

        <property name="TLS - Keystore"/>
        <property encryption="aes/gcm/256" name="TLS - Keystore Password">0vUkqxX8ln+yhQ2V||gCiSTTOzBKLkMC9Xm9vArDlIGovKpfsFFkELtcyh3JfplQ</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property encryption="aes/gcm/256" name="TLS - Truststore Password">KyzukVG3EYMFX5JP||ARcjsAHq/7BbvEoSg1yvI4V/X7dZFFk9TPNE/73s7Tu6dA</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>


    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Updated key line: nifi.bootstrap.sensitive.key=2C576A9585DB862F5ECBEE5B4FFFCCA14B18D8365968D7081651006507AD2BDE
]]></system-err>
  </testcase>
  <testcase name="testParseShouldWarnIfAuthorizersWillBeOverwritten" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.001">
    <system-err><![CDATA[[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - The source authorizers.xml and destination authorizers.xml are identical [conf/authorizers.xml] so the original will be overwritten
]]></system-err>
  </testcase>
  <testcase name="testShouldEncryptAuthorizers" classname="org.apache.nifi.properties.ConfigEncryptionToolTest" time="0.053">
    <system-err><![CDATA[[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Read lines: 
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
    This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
    to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
    If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
    This file allows for configuration of them, but they must be configured in order:

    ...
    all userGroupProviders
    all accessPolicyProviders
    all Authorizers
    ...
-->
<authorizers>

    <!--
        The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
        on the local file system.

        - Users File - The file where the FileUserGroupProvider will store users and groups.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            be used to load the users and groups into the Users File.

        - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
            each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
            "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!--
    <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
    </userGroupProvider>
    -->

    <!--
        The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
        are not configurable.

        'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
            values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.

        'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
        'Manager Password' - The password of the manager that is used to bind to the LDAP server to
            search for users.

        'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
            using LDAPS or START_TLS.
        'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
        'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
            LDAP using LDAPS or START_TLS.
        'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
            LDAPS or START_TLS (i.e. JKS or PKCS12).
        'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
            Possible values are REQUIRED, WANT, NONE.
        'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
            TLSv1.1, TLSv1.2, etc).
        'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
            before the target context is closed. Defaults to false.

        'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
        'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
        'Read Timeout' - Duration of read timeout. (i.e. 10 secs).

        'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
        'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
        'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.

        'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
        'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
        'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
        'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
        'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
        'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
            group membership will not be calculated through the users. Will rely on group membership being defined
            through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
            associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
            is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
        'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
            is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
            the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
            'Group Search Base' is also configured.

        'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
        'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
        'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
        'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
        'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
        'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
            group membership will not be calculated through the groups. Will rely on group membership being defined
            through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
            associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
            is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
        'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
            is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
            the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
            'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)

        NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
            Group names are not mapped.
    -->
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password">thisIsABadPassword</property>

        <property name="TLS - Keystore"></property>
        <property name="TLS - Keystore Password">thisIsABadPassword</property>
        <property name="TLS - Keystore Type"></property>
        <property name="TLS - Truststore"></property>
        <property name="TLS - Truststore Password">thisIsABadPassword</property>
        <property name="TLS - Truststore Type"></property>
        <property name="TLS - Client Auth"></property>
        <property name="TLS - Protocol"></property>
        <property name="TLS - Shutdown Gracefully"></property>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"></property>
        <property name="Page Size"></property>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"></property>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"></property>
        <property name="User Identity Attribute"></property>
        <property name="User Group Name Attribute"></property>
        <property name="User Group Name Attribute - Referenced Group Attribute"></property>

        <property name="Group Search Base"></property>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"></property>
        <property name="Group Name Attribute"></property>
        <property name="Group Member Attribute"></property>
        <property name="Group Member Attribute - Referenced User Attribute"></property>
    </userGroupProvider>

    <!--
        The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeUserGroupProvider</class>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
        Additionally, a single configurable user group provider is required. Users from the configurable user group provider
        are configurable, however users loaded from one of the User Group Provider [unique key] will not be.

        - Configurable User Group Provider - A configurable user group provider.

        - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
            each property must be unique, for example: "User Group Provider A", "User Group Provider B",
            "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"

            NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
            would need to be applied by the base implementation.
    -->
    <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
    <userGroupProvider>
        <identifier>composite-configurable-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
        <property name="Configurable User Group Provider">file-user-group-provider</property>
        <property name="User Group Provider 1"></property>
    </userGroupProvider>
    To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->

    <!--
        The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
        on the local file system.

        - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
            users and groups for use in the managed access policies.

        - Authorizations File - The file where the FileAccessPolicyProvider will store policies.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

            NOTE: Any users in the legacy users file must be found in the configured User Group Provider.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
            in the configured User Group Provider.
    -->
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </accessPolicyProvider>

    <!--
        The StandardManagedAuthorizer. This authorizer implementation must be configured with the
        Access Policy Provider which it will use to access and manage users, groups, and policies.
        These users, groups, and policies will be used to make all access decisions during authorization
        requests.

        - Access Policy Provider - The identifier for an Access Policy Provider defined above.
    -->
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    <!--
        NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
        Managed Authorizer. However, it is still available for backwards compatibility reasons.

        The FileAuthorizer is NiFi's provided authorizer and has the following properties:

        - Authorizations File - The file where the FileAuthorizer will store policies.

        - Users File - The file where the FileAuthorizer will store users and groups.

        - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
            given the ability to create additional users, groups, and policies. The value of this property could be
            a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
            are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
            Users File can not be specified.

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
            so the value should be the unmapped identity.

        - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
            converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
            not be specified, and this property will only be used when there are no other users, groups, and policies defined.

        - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
            should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
            The name of each property must be unique, for example for a three node cluster:
            "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"

            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
            so the values should be the unmapped identities (i.e. full DN from a certificate).
    -->
    <!-- <authorizer>
        <identifier>file-provider</identifier>
        <class>org.apache.nifi.authorization.FileAuthorizer</class>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Users File">./conf/users.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Node Identity 1"></property>
    </authorizer>
    -->
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] WARN org.apache.nifi.properties.AbstractBootstrapPropertiesLoader - System Property [nifi.properties.file.path] not found: Using Relative Path [conf/nifi.properties]
[main] WARN org.apache.nifi.properties.ConfigEncryptionTool - Could not load default bootstrap.conf: Configuration Directory [conf] not found for Bootstrap Properties
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Attempting to encrypt property using protection scheme aes/gcm/256
[main] INFO org.apache.nifi.properties.ConfigEncryptionTool - Updated XML content: <?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">2kRBy0n/cj2ReuuU||am5hgybkNkvodSjzju4ywVbo0tgtXATpaSzpg6Ndm4iEHw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">ZRAiUpKoJJUVlG9n||VvodlAw+vCOCjrWvpjFF3fzcAitfdr52DyBgq/WO0hoBdw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">WHSaCyTSMkO8uPgb||aCTHLR16fGZLN1nclJzgUh+O5hN1z9R/Dej5wD9u2hLKwg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>

[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Encrypted lines: 
<?xml version="1.0" encoding="UTF-8"?><authorizers>

    
    

    
    <userGroupProvider>
        <identifier>ldap-user-group-provider</identifier>
        <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
        <property name="Authentication Strategy">START_TLS</property>

        <property name="Manager DN">someuser</property>
        <property name="Manager Password" encryption="aes/gcm/256">2kRBy0n/cj2ReuuU||am5hgybkNkvodSjzju4ywVbo0tgtXATpaSzpg6Ndm4iEHw</property>

        <property name="TLS - Keystore"/>
        <property name="TLS - Keystore Password" encryption="aes/gcm/256">ZRAiUpKoJJUVlG9n||VvodlAw+vCOCjrWvpjFF3fzcAitfdr52DyBgq/WO0hoBdw</property>
        <property name="TLS - Keystore Type"/>
        <property name="TLS - Truststore"/>
        <property name="TLS - Truststore Password" encryption="aes/gcm/256">WHSaCyTSMkO8uPgb||aCTHLR16fGZLN1nclJzgUh+O5hN1z9R/Dej5wD9u2hLKwg</property>
        <property name="TLS - Truststore Type"/>
        <property name="TLS - Client Auth"/>
        <property name="TLS - Protocol"/>
        <property name="TLS - Shutdown Gracefully"/>

        <property name="Referral Strategy">FOLLOW</property>
        <property name="Connect Timeout">10 secs</property>
        <property name="Read Timeout">10 secs</property>

        <property name="Url"/>
        <property name="Page Size"/>
        <property name="Sync Interval">30 mins</property>

        <property name="User Search Base"/>
        <property name="User Object Class">person</property>
        <property name="User Search Scope">ONE_LEVEL</property>
        <property name="User Search Filter"/>
        <property name="User Identity Attribute"/>
        <property name="User Group Name Attribute"/>
        <property name="User Group Name Attribute - Referenced Group Attribute"/>

        <property name="Group Search Base"/>
        <property name="Group Object Class">group</property>
        <property name="Group Search Scope">ONE_LEVEL</property>
        <property name="Group Search Filter"/>
        <property name="Group Name Attribute"/>
        <property name="Group Member Attribute"/>
        <property name="Group Member Attribute - Referenced User Attribute"/>
    </userGroupProvider>

    
    

    
    

    
    <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">ldap-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"/>
        <property name="Legacy Authorized Users File"/>

        <property name="Node Identity 1"/>
    </accessPolicyProvider>

    
    <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
    </authorizer>

    
    
</authorizers>
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: 2kRBy0n/cj2ReuuU||am5hgybkNkvodSjzju4ywVbo0tgtXATpaSzpg6Ndm4iEHw
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: ZRAiUpKoJJUVlG9n||VvodlAw+vCOCjrWvpjFF3fzcAitfdr52DyBgq/WO0hoBdw
[main] INFO org.apache.nifi.properties.ConfigEncryptionToolTest - Cipher text: WHSaCyTSMkO8uPgb||aCTHLR16fGZLN1nclJzgUh+O5hN1z9R/Dej5wD9u2hLKwg
]]></system-err>
  </testcase>
</testsuite>