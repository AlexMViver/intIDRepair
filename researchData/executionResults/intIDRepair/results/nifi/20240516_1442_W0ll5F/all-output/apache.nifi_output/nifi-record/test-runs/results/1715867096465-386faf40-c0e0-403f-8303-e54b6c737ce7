{"id":"1715867096465-386faf40-c0e0-403f-8303-e54b6c737ce7","testOrder":["org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()"],"results":{"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","result":"PASS","time":2.93759E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","result":"PASS","time":3.18415E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","result":"PASS","time":7.17038E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","result":"PASS","time":0.002169718,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","result":"PASS","time":0.002227053,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","result":"PASS","time":4.485E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","result":"PASS","time":6.59643E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","result":"PASS","time":6.51281E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","result":"PASS","time":8.47934E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","result":"PASS","time":2.44172E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","result":"PASS","time":0.357348969,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","result":"PASS","time":3.38426E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","result":"PASS","time":2.61886E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","result":"PASS","time":0.016409565,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","result":"PASS","time":1.9701E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","result":"PASS","time":9.5549E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","result":"PASS","time":0.001902079,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","result":"PASS","time":6.75128E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","result":"PASS","time":4.05048E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","result":"PASS","time":5.05236E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","result":"PASS","time":2.17682E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","result":"PASS","time":0.002255569,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","result":"PASS","time":3.75807E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","result":"PASS","time":0.005842492,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","result":"PASS","time":0.027759418,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","result":"PASS","time":0.008305418,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","result":"PASS","time":0.012331365,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","result":"PASS","time":3.77927E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","result":"PASS","time":2.38587E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","result":"PASS","time":3.30876E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","result":"PASS","time":2.35754E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","result":"PASS","time":5.11043E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","result":"PASS","time":5.25102E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","result":"PASS","time":2.15706E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","result":"PASS","time":2.84486E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","result":"PASS","time":0.003529161,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","result":"PASS","time":7.13066E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","result":"PASS","time":0.008465036,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","result":"PASS","time":6.952E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","result":"PASS","time":0.001819358,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","result":"PASS","time":3.65841E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","result":"PASS","time":6.66956E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","result":"PASS","time":4.41048E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","result":"PASS","time":0.016450873,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","result":"PASS","time":0.017572573,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","result":"PASS","time":6.62027E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","result":"PASS","time":3.4003E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","result":"PASS","time":2.2543E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","result":"PASS","time":0.014248663,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","result":"PASS","time":2.40666E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","result":"PASS","time":8.37985E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","result":"PASS","time":2.06803E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","result":"PASS","time":2.83815E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","result":"PASS","time":0.237088768,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","result":"PASS","time":0.025783459,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","result":"PASS","time":0.006786386,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","result":"PASS","time":4.796E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","result":"PASS","time":0.007369162,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","result":"PASS","time":0.031691445,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","result":"PASS","time":0.001124359,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","result":"PASS","time":0.011274071,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","result":"PASS","time":3.32491E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","result":"PASS","time":0.004511831,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()","result":"PASS","time":0.004457964,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","result":"PASS","time":0.001054657,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","result":"PASS","time":0.014685258,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","result":"PASS","time":0.005776656,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","result":"PASS","time":2.93267E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","result":"PASS","time":2.24227E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","result":"PASS","time":3.40065E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","result":"PASS","time":0.00463905,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","result":"PASS","time":5.34976E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","result":"PASS","time":0.004725375,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","result":"PASS","time":4.52963E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","result":"PASS","time":0.005853416,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","result":"PASS","time":8.0718E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","result":"PASS","time":0.003107485,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","result":"PASS","time":0.001177941,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","result":"PASS","time":0.018307724,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","result":"PASS","time":3.95071E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","result":"PASS","time":2.08712E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","result":"PASS","time":3.09498E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","result":"PASS","time":4.44835E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","result":"PASS","time":0.004846932,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","result":"PASS","time":2.18074E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","result":"PASS","time":6.13764E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","result":"PASS","time":2.66605E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","result":"PASS","time":1.93667E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","result":"PASS","time":5.74977E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","result":"PASS","time":8.40522E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","result":"PASS","time":0.005076041,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","result":"PASS","time":4.83853E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","result":"PASS","time":3.07504E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","result":"PASS","time":0.013845542,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","result":"PASS","time":0.002974959,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","result":"PASS","time":0.004699318,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","result":"PASS","time":2.55042E-4,"stackTrace":[]}}}