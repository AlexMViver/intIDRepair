{"id":"1715869757525-8bc1eaaa-13f1-4667-b3b1-cf798e1c28e4","testOrder":["org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()"],"results":{"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsIntegerFitsToFloat()","result":"PASS","time":2.77035E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testCompatibleDataTypeBigDecimal()","result":"PASS","time":2.93349E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToString()","result":"PASS","time":0.001115699,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertArrayOfRecordsToJavaArray()","result":"PASS","time":0.002333132,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFloatingPointCompatibility()","result":"PASS","time":0.001737702,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateDefaultTimeZoneFormat()","result":"PASS","time":4.00588E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasInGivenField()","result":"PASS","time":5.30523E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testHashCodeAndEqualsWithSelfReferencingSchema()","result":"PASS","time":0.00115019,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputStringIsInvalid()","result":"PASS","time":9.49669E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeMap()","result":"PASS","time":3.08379E-4,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testFieldsArentCheckedInEqualsIfNameAndNamespaceMatch()","result":"PASS","time":0.383296893,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToDouble()","result":"PASS","time":3.52924E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToDouble()","result":"PASS","time":4.19463E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromString()","result":"PASS","time":0.010587736,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasOneValue()","result":"PASS","time":2.28613E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredTimeZoneFormat()","result":"PASS","time":8.12588E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenInputIsValid()","result":"PASS","time":0.001744908,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordMapToJavaMap()","result":"PASS","time":9.96375E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeInteger()","result":"PASS","time":4.14863E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigInt()","result":"PASS","time":5.48999E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordArrayToJavaArray()","result":"PASS","time":3.06734E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedNumberType()","result":"PASS","time":0.002327876,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testTimestampToDate()","result":"PASS","time":4.17001E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDate()","result":"PASS","time":0.009733164,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithConflictingNamesAliases()","result":"PASS","time":0.029776974,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypes()","result":"PASS","time":0.00687553,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesWithRecord()","result":"PASS","time":0.008239599,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithLong()","result":"PASS","time":5.12038E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeBigint()","result":"PASS","time":2.99475E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapStringKeys()","result":"PASS","time":3.42151E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsLongFitsToFloat()","result":"PASS","time":2.55022E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBoolean()","result":"PASS","time":7.29663E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testIllegalDefaultValue()","result":"PASS","time":5.59738E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testDateToTimestamp()","result":"PASS","time":2.45675E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenInt_vs_INT_FLOAT_ThenShouldReturnINT()","result":"PASS","time":3.70125E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaThrowsExceptionSchemaCreationStillCalledConsideringLogicalTypeFlag()","result":"PASS","time":0.003820138,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsDoubleWithinFloatInterval()","result":"PASS","time":7.37305E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTimeStamp()","result":"PASS","time":0.008845097,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigIntFitsToFloat()","result":"PASS","time":0.001130619,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromUtilDate()","result":"PASS","time":0.0016872,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDateToUTC()","result":"PASS","time":5.36353E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithShort()","result":"PASS","time":7.3437E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithByte()","result":"PASS","time":5.76635E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypesNoInputSchema()","result":"PASS","time":0.012780129,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsNotSupportedException()","result":"PASS","time":0.016832013,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenNullInput()","result":"PASS","time":6.67481E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToArray()","result":"PASS","time":3.02051E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasValue()","result":"PASS","time":3.34618E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypesNoInputSchema()","result":"PASS","time":0.010158424,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testStringToBytes()","result":"PASS","time":2.76321E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithFloat()","result":"PASS","time":8.7093E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValue()","result":"PASS","time":2.09416E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferDataTypeWithBigDecimal()","result":"PASS","time":3.06682E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateRecord()","result":"PASS","time":0.200045438,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithStringShouldReturnChar()","result":"PASS","time":0.022581345,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithTime()","result":"PASS","time":0.006569712,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenExpectedIsBigDecimal()","result":"PASS","time":3.3537E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithString()","result":"PASS","time":0.007451725,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeWithLogicalTypes()","result":"PASS","time":0.033273072,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromSqlDate()","result":"PASS","time":0.001067464,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherType()","result":"PASS","time":0.008630293,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testToLocalDateFromNumberEpochMillis()","result":"PASS","time":5.75567E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeWithoutSchema()","result":"PASS","time":0.010744251,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testArrayTypeNoLogicalTypes()","result":"PASS","time":0.00477547,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertTypeStringToDateConfiguredSystemDefaultTimeZoneFormat()","result":"PASS","time":0.001085802,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenNoRecordSchema()","result":"PASS","time":0.010093123,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWithLogicalTypes()","result":"PASS","time":0.006266013,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsBigDecimalTypeCompatible()","result":"PASS","time":2.61292E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueWithAliasesDefined()","result":"PASS","time":2.10939E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsFittingNumberType()","result":"PASS","time":3.41359E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeAndNoLogicalTypesNoSchema()","result":"PASS","time":0.005084307,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithBigDecimal()","result":"PASS","time":6.38168E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaArrayThrowsException()","result":"PASS","time":0.005085127,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithInt()","result":"PASS","time":5.28334E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaNoLogicalTypes()","result":"PASS","time":0.006058344,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameAlias()","result":"PASS","time":0.001254203,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeByStringValueShouldReturnEvenWhenOneTypeThrowsException()","result":"PASS","time":0.003562289,"stackTrace":[]},"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()":{"name":"org.apache.nifi.serialization.TestSimpleRecordSchema#testPreventsTwoFieldsWithSameName()","result":"PASS","time":0.001032118,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchema()","result":"PASS","time":0.01664331,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertRecordFieldToObject()","result":"PASS","time":4.36582E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testDefaultValueInGivenField()","result":"PASS","time":2.36728E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetDataTypeFromSQLTypeValue()","result":"PASS","time":3.56174E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithDouble()","result":"PASS","time":4.89425E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithArray()","result":"PASS","time":0.004345486,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testGetSQLTypeValueWithBigDecimal()","result":"PASS","time":2.38292E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testInferTypeWithMapNonStringKeys()","result":"PASS","time":0.001012705,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenFloat_vs_INT_FLOAT_ThenShouldReturnFLOAT()","result":"PASS","time":3.03313E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingValues()","result":"PASS","time":2.13493E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertToBigDecimalWhenUnsupportedType()","result":"PASS","time":5.90873E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testConvertDataTypeBigint()","result":"PASS","time":9.26164E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypesNoSchema()","result":"PASS","time":0.00518597,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testFindMostSuitableTypeWithChar()","result":"PASS","time":7.08215E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()":{"name":"org.apache.nifi.serialization.record.TestMapRecord#testAliasConflictingAliasValues()","result":"PASS","time":2.83573E-4,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testChooseDataTypeWhenHasChoiceThenShouldReturnSingleMatchingFromChoice()","result":"PASS","time":0.01493212,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testBytesToBytes()","result":"PASS","time":0.00241022,"stackTrace":[]},"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()":{"name":"org.apache.nifi.serialization.record.ResultSetRecordSetTest#testCreateSchemaWhenOtherTypeUsingLogicalTypes()","result":"PASS","time":0.005101293,"stackTrace":[]},"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()":{"name":"org.apache.nifi.serialization.record.TestDataTypeUtils#testIsCompatibleDataTypeArrayDifferentElementTypes()","result":"PASS","time":2.52253E-4,"stackTrace":[]}}}